
sos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000137c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000137c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800086  00800086  00001436  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002673  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8e  00000000  00000000  00003d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ef  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  0000640c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001169  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019a0  00000000  00000000  00007ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009479  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_1>
       8:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_2>
       c:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
      8a:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <task1>:
	}
}

void task1(void*ptr)
{
	LED_toggle(&gl_str_led_task1);
      92:	85 e7       	ldi	r24, 0x75	; 117
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	0e 94 a2 00 	call	0x144	; 0x144 <LED_toggle>
      9a:	08 95       	ret

0000009c <task2>:
}


void task2(void*ptr)
{
	LED_toggle(&gl_str_led_task2);
      9c:	83 e7       	ldi	r24, 0x73	; 115
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	0e 94 a2 00 	call	0x144	; 0x144 <LED_toggle>
      a4:	08 95       	ret

000000a6 <stop_call_back>:
}

void stop_call_back(void)
{
	sos_disable();
      a6:	0e 94 94 06 	call	0xd28	; 0xd28 <sos_disable>
	gl_enu_app_state =  APP_STOP_OS ;
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
      b0:	08 95       	ret

000000b2 <app_init>:
	.ptr_task_arg = STR_NULL,
	.taskPeriodicity = 5, //times 100ms the tick time
};
void app_init(void)
{
  LED_initialize(&gl_str_led_task1);
      b2:	85 e7       	ldi	r24, 0x75	; 117
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 97 00 	call	0x12e	; 0x12e <LED_initialize>
  LED_initialize(&gl_str_led_task2);
      ba:	83 e7       	ldi	r24, 0x73	; 115
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 97 00 	call	0x12e	; 0x12e <LED_initialize>
  PUSH_BTN_intialize(&gl_str_start_button);
      c2:	80 e7       	ldi	r24, 0x70	; 112
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 ac 00 	call	0x158	; 0x158 <PUSH_BTN_intialize>
  H_EXTI_init   (&gl_str_HEXT_Stop_os);
      ca:	8c e6       	ldi	r24, 0x6C	; 108
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 94 00 	call	0x128	; 0x128 <H_EXTI_init>
  sos_init();
      d2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <sos_init>
  sos_create_task(PRIORITY_ONE,&gl_str_task1_configs);
      d6:	66 e6       	ldi	r22, 0x66	; 102
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <sos_create_task>
  sos_create_task(PRIORITY_TWO,&gl_str_task2_configs);
      e0:	60 e6       	ldi	r22, 0x60	; 96
      e2:	70 e0       	ldi	r23, 0x00	; 0
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <sos_create_task>
      ea:	08 95       	ret

000000ec <app_start>:
}
void app_start(void)
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	1f 92       	push	r1
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	EN_PUSH_BTN_state_t loc_en_PUSH_BTN_state = PUSH_BTN_STATE_RELEASED;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		switch(gl_enu_app_state)
      fa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
      fe:	88 23       	and	r24, r24
     100:	19 f0       	breq	.+6      	; 0x108 <app_start+0x1c>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	21 f0       	breq	.+8      	; 0x10e <app_start+0x22>
     106:	f9 cf       	rjmp	.-14     	; 0xfa <app_start+0xe>
		{
			case APP_RUN_OS : 
			{
				sos_run();
     108:	0e 94 06 06 	call	0xc0c	; 0xc0c <sos_run>
				break;
     10c:	f6 cf       	rjmp	.-20     	; 0xfa <app_start+0xe>
			}
			
			case APP_STOP_OS :
			{
				PUSH_BTN_read_state(&gl_str_start_button,&loc_en_PUSH_BTN_state);
     10e:	be 01       	movw	r22, r28
     110:	6f 5f       	subi	r22, 0xFF	; 255
     112:	7f 4f       	sbci	r23, 0xFF	; 255
     114:	80 e7       	ldi	r24, 0x70	; 112
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 b7 00 	call	0x16e	; 0x16e <PUSH_BTN_read_state>
				if(loc_en_PUSH_BTN_state == PUSH_BTN_STATE_PRESSED)
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	81 11       	cpse	r24, r1
     120:	ec cf       	rjmp	.-40     	; 0xfa <app_start+0xe>
				{
					gl_enu_app_state = APP_RUN_OS;
     122:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
     126:	e9 cf       	rjmp	.-46     	; 0xfa <app_start+0xe>

00000128 <H_EXTI_init>:

#include "h_exti.h"

Std_ReturnType H_EXTI_init(const  ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{
	EXT_vINTERRUPT_Init(EXT_INTx);
     128:	0e 94 b5 02 	call	0x56a	; 0x56a <EXT_vINTERRUPT_Init>
}
     12c:	08 95       	ret

0000012e <LED_initialize>:
	{
		
		DIO_writepin(led->DIO_Pin_type, OUTPUT_LOW);
	}
	return ret;
}
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	39 f0       	breq	.+14     	; 0x140 <LED_initialize+0x12>
     132:	fc 01       	movw	r30, r24
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_initpin>
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	08 95       	ret
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	08 95       	ret

00000144 <LED_toggle>:
Std_ReturnType LED_toggle(const ST_led_t *led)
{
	Std_ReturnType ret = E_OK;
	if(PTR_NULL == led)
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	31 f0       	breq	.+12     	; 0x154 <LED_toggle+0x10>
     148:	fc 01       	movw	r30, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
	   DIO_togglepin(led->DIO_Pin_type);
     14a:	80 81       	ld	r24, Z
     14c:	0e 94 39 02 	call	0x472	; 0x472 <DIO_togglepin>
	}
	return ret;
}
Std_ReturnType LED_toggle(const ST_led_t *led)
{
	Std_ReturnType ret = E_OK;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret
	if(PTR_NULL == led)
	{
		ret = E_NOT_OK;
     154:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	   DIO_togglepin(led->DIO_Pin_type);
	}
	return ret;
}
     156:	08 95       	ret

00000158 <PUSH_BTN_intialize>:
#include"PB_interface.h"

Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	39 f0       	breq	.+14     	; 0x16a <PUSH_BTN_intialize+0x12>
     15c:	fc 01       	movw	r30, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		DIO_initpin(btn->PUSH_BTN_pin,INPULL);
     15e:	62 e0       	ldi	r22, 0x02	; 2
     160:	80 81       	ld	r24, Z
     162:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_initpin>
		ret = E_OK;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	08 95       	ret
Std_ReturnType PUSH_BTN_intialize(const ST_PUSH_BTN_t *btn)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn)
	{
		ret = E_NOT_OK;
     16a:	80 e0       	ldi	r24, 0x00	; 0
	{
		DIO_initpin(btn->PUSH_BTN_pin,INPULL);
		ret = E_OK;
	}
	return ret;
}
     16c:	08 95       	ret

0000016e <PUSH_BTN_read_state>:

Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	1f 92       	push	r1
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	39 f1       	breq	.+78     	; 0x1d2 <PUSH_BTN_read_state+0x64>
     184:	61 15       	cp	r22, r1
     186:	71 05       	cpc	r23, r1
     188:	31 f1       	breq	.+76     	; 0x1d6 <PUSH_BTN_read_state+0x68>
     18a:	7b 01       	movw	r14, r22
     18c:	8c 01       	movw	r16, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		EN_DIO_PinVoltage_type pin_logic_status = OUTPUT_LOW;
     18e:	19 82       	std	Y+1, r1	; 0x01
		DIO_readpin(btn->PUSH_BTN_pin,&pin_logic_status);
     190:	be 01       	movw	r22, r28
     192:	6f 5f       	subi	r22, 0xFF	; 255
     194:	7f 4f       	sbci	r23, 0xFF	; 255
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_readpin>
		if(PUSH_BTN_PULL_UP == btn->PUSH_BTN_connection)
     19e:	f8 01       	movw	r30, r16
     1a0:	82 81       	ldd	r24, Z+2	; 0x02
     1a2:	81 11       	cpse	r24, r1
     1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <PUSH_BTN_read_state+0x4a>
		{
			if(OUTPUT_HIGH == pin_logic_status)
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	19 f4       	brne	.+6      	; 0x1b2 <PUSH_BTN_read_state+0x44>
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     1ac:	f7 01       	movw	r30, r14
     1ae:	80 83       	st	Z, r24
     1b0:	0e c0       	rjmp	.+28     	; 0x1ce <PUSH_BTN_read_state+0x60>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     1b2:	f7 01       	movw	r30, r14
     1b4:	10 82       	st	Z, r1
     1b6:	0b c0       	rjmp	.+22     	; 0x1ce <PUSH_BTN_read_state+0x60>
			}
		}
		else if(PUSH_BTN_PULL_DOWN == btn->PUSH_BTN_connection)
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	49 f4       	brne	.+18     	; 0x1ce <PUSH_BTN_read_state+0x60>
		{
			if(OUTPUT_LOW == pin_logic_status)
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	81 11       	cpse	r24, r1
     1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <PUSH_BTN_read_state+0x5a>
			{
				*btn_state = PUSH_BTN_STATE_PRESSED;
     1c2:	f7 01       	movw	r30, r14
     1c4:	10 82       	st	Z, r1
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <PUSH_BTN_read_state+0x60>
			}
			else
			{
				*btn_state = PUSH_BTN_STATE_RELEASED;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	f7 01       	movw	r30, r14
     1cc:	80 83       	st	Z, r24
			}
		}
		else{/* nothing */}
		ret = E_OK;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <PUSH_BTN_read_state+0x6a>
Std_ReturnType PUSH_BTN_read_state(const ST_PUSH_BTN_t *btn , EN_PUSH_BTN_state_t *btn_state)
{
	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == btn || PTR_NULL == btn_state )
	{
		ret = E_NOT_OK;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <PUSH_BTN_read_state+0x6a>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
		else{/* nothing */}
		ret = E_OK;
	}

	return ret;
}
     1d8:	0f 90       	pop	r0
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <main>:

#include "APPLICATION/app/app.h"

int main(void)
{
    app_init();
     1e8:	0e 94 59 00 	call	0xb2	; 0xb2 <app_init>
	app_start();
     1ec:	0e 94 76 00 	call	0xec	; 0xec <app_start>
}
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	08 95       	ret

000001f6 <DIO_initpin>:

				CLEAR_BIT(DIO_PORTC_PORT_REG,pin_num);
				break;
				case PORT_D:

				CLEAR_BIT(DIO_PORTD_PORT_REG,pin_num);
     1f6:	98 2f       	mov	r25, r24
     1f8:	96 95       	lsr	r25
     1fa:	96 95       	lsr	r25
     1fc:	96 95       	lsr	r25
     1fe:	87 70       	andi	r24, 0x07	; 7
     200:	61 30       	cpi	r22, 0x01	; 1
     202:	09 f4       	brne	.+2      	; 0x206 <DIO_initpin+0x10>
     204:	55 c0       	rjmp	.+170    	; 0x2b0 <DIO_initpin+0xba>
     206:	20 f0       	brcs	.+8      	; 0x210 <DIO_initpin+0x1a>
     208:	62 30       	cpi	r22, 0x02	; 2
     20a:	09 f4       	brne	.+2      	; 0x20e <DIO_initpin+0x18>
     20c:	a1 c0       	rjmp	.+322    	; 0x350 <DIO_initpin+0x15a>
     20e:	08 95       	ret
     210:	91 30       	cpi	r25, 0x01	; 1
     212:	c1 f0       	breq	.+48     	; 0x244 <DIO_initpin+0x4e>
     214:	28 f0       	brcs	.+10     	; 0x220 <DIO_initpin+0x2a>
     216:	92 30       	cpi	r25, 0x02	; 2
     218:	39 f1       	breq	.+78     	; 0x268 <DIO_initpin+0x72>
     21a:	93 30       	cpi	r25, 0x03	; 3
     21c:	b9 f1       	breq	.+110    	; 0x28c <DIO_initpin+0x96>
     21e:	08 95       	ret
     220:	4a b3       	in	r20, 0x1a	; 26
     222:	21 e0       	ldi	r18, 0x01	; 1
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	b9 01       	movw	r22, r18
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_initpin+0x38>
     22a:	66 0f       	add	r22, r22
     22c:	77 1f       	adc	r23, r23
     22e:	8a 95       	dec	r24
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_initpin+0x34>
     232:	cb 01       	movw	r24, r22
     234:	94 2f       	mov	r25, r20
     236:	98 2b       	or	r25, r24
     238:	9a bb       	out	0x1a, r25	; 26
     23a:	9b b3       	in	r25, 0x1b	; 27
     23c:	80 95       	com	r24
     23e:	89 23       	and	r24, r25
     240:	8b bb       	out	0x1b, r24	; 27
     242:	08 95       	ret
     244:	47 b3       	in	r20, 0x17	; 23
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	b9 01       	movw	r22, r18
     24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_initpin+0x5c>
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	8a 95       	dec	r24
     254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_initpin+0x58>
     256:	cb 01       	movw	r24, r22
     258:	94 2f       	mov	r25, r20
     25a:	98 2b       	or	r25, r24
     25c:	97 bb       	out	0x17, r25	; 23
     25e:	98 b3       	in	r25, 0x18	; 24
     260:	80 95       	com	r24
     262:	89 23       	and	r24, r25
     264:	88 bb       	out	0x18, r24	; 24
     266:	08 95       	ret
     268:	44 b3       	in	r20, 0x14	; 20
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	b9 01       	movw	r22, r18
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_initpin+0x80>
     272:	66 0f       	add	r22, r22
     274:	77 1f       	adc	r23, r23
     276:	8a 95       	dec	r24
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_initpin+0x7c>
     27a:	cb 01       	movw	r24, r22
     27c:	94 2f       	mov	r25, r20
     27e:	98 2b       	or	r25, r24
     280:	94 bb       	out	0x14, r25	; 20
     282:	95 b3       	in	r25, 0x15	; 21
     284:	80 95       	com	r24
     286:	89 23       	and	r24, r25
     288:	85 bb       	out	0x15, r24	; 21
     28a:	08 95       	ret
     28c:	41 b3       	in	r20, 0x11	; 17
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	b9 01       	movw	r22, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_initpin+0xa4>
     296:	66 0f       	add	r22, r22
     298:	77 1f       	adc	r23, r23
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_initpin+0xa0>
     29e:	cb 01       	movw	r24, r22
     2a0:	94 2f       	mov	r25, r20
     2a2:	98 2b       	or	r25, r24
     2a4:	91 bb       	out	0x11, r25	; 17
     2a6:	92 b3       	in	r25, 0x12	; 18
     2a8:	80 95       	com	r24
     2aa:	89 23       	and	r24, r25
     2ac:	82 bb       	out	0x12, r24	; 18
     2ae:	08 95       	ret
     2b0:	91 30       	cpi	r25, 0x01	; 1
     2b2:	c1 f0       	breq	.+48     	; 0x2e4 <DIO_initpin+0xee>
     2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_initpin+0xca>
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	39 f1       	breq	.+78     	; 0x308 <DIO_initpin+0x112>
     2ba:	93 30       	cpi	r25, 0x03	; 3
     2bc:	b9 f1       	breq	.+110    	; 0x32c <DIO_initpin+0x136>
     2be:	08 95       	ret
     2c0:	4a b3       	in	r20, 0x1a	; 26
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	b9 01       	movw	r22, r18
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_initpin+0xd8>
     2ca:	66 0f       	add	r22, r22
     2cc:	77 1f       	adc	r23, r23
     2ce:	8a 95       	dec	r24
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_initpin+0xd4>
     2d2:	cb 01       	movw	r24, r22
     2d4:	80 95       	com	r24
     2d6:	94 2f       	mov	r25, r20
     2d8:	98 23       	and	r25, r24
     2da:	9a bb       	out	0x1a, r25	; 26
     2dc:	9b b3       	in	r25, 0x1b	; 27
     2de:	89 23       	and	r24, r25
     2e0:	8b bb       	out	0x1b, r24	; 27
     2e2:	08 95       	ret
     2e4:	47 b3       	in	r20, 0x17	; 23
     2e6:	21 e0       	ldi	r18, 0x01	; 1
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	b9 01       	movw	r22, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_initpin+0xfc>
     2ee:	66 0f       	add	r22, r22
     2f0:	77 1f       	adc	r23, r23
     2f2:	8a 95       	dec	r24
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_initpin+0xf8>
     2f6:	cb 01       	movw	r24, r22
     2f8:	80 95       	com	r24
     2fa:	94 2f       	mov	r25, r20
     2fc:	98 23       	and	r25, r24
     2fe:	97 bb       	out	0x17, r25	; 23
     300:	98 b3       	in	r25, 0x18	; 24
     302:	89 23       	and	r24, r25
     304:	88 bb       	out	0x18, r24	; 24
     306:	08 95       	ret
     308:	44 b3       	in	r20, 0x14	; 20
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_initpin+0x120>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_initpin+0x11c>
     31a:	cb 01       	movw	r24, r22
     31c:	80 95       	com	r24
     31e:	94 2f       	mov	r25, r20
     320:	98 23       	and	r25, r24
     322:	94 bb       	out	0x14, r25	; 20
     324:	95 b3       	in	r25, 0x15	; 21
     326:	89 23       	and	r24, r25
     328:	85 bb       	out	0x15, r24	; 21
     32a:	08 95       	ret
     32c:	41 b3       	in	r20, 0x11	; 17
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	b9 01       	movw	r22, r18
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_initpin+0x144>
     336:	66 0f       	add	r22, r22
     338:	77 1f       	adc	r23, r23
     33a:	8a 95       	dec	r24
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_initpin+0x140>
     33e:	cb 01       	movw	r24, r22
     340:	80 95       	com	r24
     342:	94 2f       	mov	r25, r20
     344:	98 23       	and	r25, r24
     346:	91 bb       	out	0x11, r25	; 17
     348:	92 b3       	in	r25, 0x12	; 18
     34a:	89 23       	and	r24, r25
     34c:	82 bb       	out	0x12, r24	; 18
     34e:	08 95       	ret
     350:	91 30       	cpi	r25, 0x01	; 1
     352:	c1 f0       	breq	.+48     	; 0x384 <DIO_initpin+0x18e>
     354:	28 f0       	brcs	.+10     	; 0x360 <DIO_initpin+0x16a>
     356:	92 30       	cpi	r25, 0x02	; 2
     358:	39 f1       	breq	.+78     	; 0x3a8 <DIO_initpin+0x1b2>
     35a:	93 30       	cpi	r25, 0x03	; 3
     35c:	b9 f1       	breq	.+110    	; 0x3cc <DIO_initpin+0x1d6>
     35e:	08 95       	ret
     360:	4a b3       	in	r20, 0x1a	; 26
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	b9 01       	movw	r22, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_initpin+0x178>
     36a:	66 0f       	add	r22, r22
     36c:	77 1f       	adc	r23, r23
     36e:	8a 95       	dec	r24
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_initpin+0x174>
     372:	cb 01       	movw	r24, r22
     374:	96 2f       	mov	r25, r22
     376:	90 95       	com	r25
     378:	94 23       	and	r25, r20
     37a:	9a bb       	out	0x1a, r25	; 26
     37c:	9b b3       	in	r25, 0x1b	; 27
     37e:	89 2b       	or	r24, r25
     380:	8b bb       	out	0x1b, r24	; 27
     382:	08 95       	ret
     384:	47 b3       	in	r20, 0x17	; 23
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	b9 01       	movw	r22, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_initpin+0x19c>
     38e:	66 0f       	add	r22, r22
     390:	77 1f       	adc	r23, r23
     392:	8a 95       	dec	r24
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_initpin+0x198>
     396:	cb 01       	movw	r24, r22
     398:	96 2f       	mov	r25, r22
     39a:	90 95       	com	r25
     39c:	94 23       	and	r25, r20
     39e:	97 bb       	out	0x17, r25	; 23
     3a0:	98 b3       	in	r25, 0x18	; 24
     3a2:	89 2b       	or	r24, r25
     3a4:	88 bb       	out	0x18, r24	; 24
     3a6:	08 95       	ret
     3a8:	44 b3       	in	r20, 0x14	; 20
     3aa:	21 e0       	ldi	r18, 0x01	; 1
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	b9 01       	movw	r22, r18
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_initpin+0x1c0>
     3b2:	66 0f       	add	r22, r22
     3b4:	77 1f       	adc	r23, r23
     3b6:	8a 95       	dec	r24
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_initpin+0x1bc>
     3ba:	cb 01       	movw	r24, r22
     3bc:	96 2f       	mov	r25, r22
     3be:	90 95       	com	r25
     3c0:	94 23       	and	r25, r20
     3c2:	94 bb       	out	0x14, r25	; 20
     3c4:	95 b3       	in	r25, 0x15	; 21
     3c6:	89 2b       	or	r24, r25
     3c8:	85 bb       	out	0x15, r24	; 21
     3ca:	08 95       	ret
     3cc:	41 b3       	in	r20, 0x11	; 17
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	b9 01       	movw	r22, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_initpin+0x1e4>
     3d6:	66 0f       	add	r22, r22
     3d8:	77 1f       	adc	r23, r23
     3da:	8a 95       	dec	r24
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_initpin+0x1e0>
     3de:	cb 01       	movw	r24, r22
     3e0:	96 2f       	mov	r25, r22
     3e2:	90 95       	com	r25
     3e4:	94 23       	and	r25, r20
     3e6:	91 bb       	out	0x11, r25	; 17
     3e8:	92 b3       	in	r25, 0x12	; 18
     3ea:	89 2b       	or	r24, r25
     3ec:	82 bb       	out	0x12, r24	; 18
     3ee:	08 95       	ret

000003f0 <DIO_readpin>:
	}

}
void  DIO_readpin(EN_DIO_Pin_type pin,EN_DIO_PinVoltage_type *volt)
{
	EN_DIO_Port_type port = pin/8 ;
     3f0:	98 2f       	mov	r25, r24
     3f2:	96 95       	lsr	r25
     3f4:	96 95       	lsr	r25
     3f6:	96 95       	lsr	r25
	Uint8_t pin_num =pin % 8;
     3f8:	87 70       	andi	r24, 0x07	; 7
	if (pin_num < 8)
	{

		switch(port)
     3fa:	91 30       	cpi	r25, 0x01	; 1
     3fc:	99 f0       	breq	.+38     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     3fe:	28 f0       	brcs	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     400:	92 30       	cpi	r25, 0x02	; 2
     402:	e9 f0       	breq	.+58     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     404:	93 30       	cpi	r25, 0x03	; 3
     406:	41 f1       	breq	.+80     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     408:	08 95       	ret
		{
			case PORT_A:

			*volt=GET_BIT(DIO_PORTA_PIN_REG,pin_num);
     40a:	29 b3       	in	r18, 0x19	; 25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	a9 01       	movw	r20, r18
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	55 95       	asr	r21
     414:	47 95       	ror	r20
     416:	8a 95       	dec	r24
     418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     41a:	ca 01       	movw	r24, r20
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	fb 01       	movw	r30, r22
     420:	80 83       	st	Z, r24
			break;
     422:	08 95       	ret
			case PORT_B:

			*volt=GET_BIT(DIO_PORTB_PIN_REG,pin_num);
     424:	26 b3       	in	r18, 0x16	; 22
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	a9 01       	movw	r20, r18
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42c:	55 95       	asr	r21
     42e:	47 95       	ror	r20
     430:	8a 95       	dec	r24
     432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     434:	ca 01       	movw	r24, r20
     436:	81 70       	andi	r24, 0x01	; 1
     438:	fb 01       	movw	r30, r22
     43a:	80 83       	st	Z, r24
			break;
     43c:	08 95       	ret
			case PORT_C:

			*volt=GET_BIT(DIO_PORTC_PIN_REG,pin_num);
     43e:	23 b3       	in	r18, 0x13	; 19
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     446:	55 95       	asr	r21
     448:	47 95       	ror	r20
     44a:	8a 95       	dec	r24
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44e:	ca 01       	movw	r24, r20
     450:	81 70       	andi	r24, 0x01	; 1
     452:	fb 01       	movw	r30, r22
     454:	80 83       	st	Z, r24
			break;
     456:	08 95       	ret
			case PORT_D:

			*volt=GET_BIT(DIO_PORTD_PIN_REG,pin_num);
     458:	20 b3       	in	r18, 0x10	; 16
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	a9 01       	movw	r20, r18
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     460:	55 95       	asr	r21
     462:	47 95       	ror	r20
     464:	8a 95       	dec	r24
     466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     468:	ca 01       	movw	r24, r20
     46a:	81 70       	andi	r24, 0x01	; 1
     46c:	fb 01       	movw	r30, r22
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <DIO_togglepin>:
	{
	}
}
void  DIO_togglepin(EN_DIO_Pin_type pin)
{
	EN_DIO_Port_type port = pin/8 ;
     472:	98 2f       	mov	r25, r24
     474:	96 95       	lsr	r25
     476:	96 95       	lsr	r25
     478:	96 95       	lsr	r25
	Uint8_t pin_num =pin % 8;
     47a:	87 70       	andi	r24, 0x07	; 7
	if (pin_num< 8)
	{
		switch(port)
     47c:	91 30       	cpi	r25, 0x01	; 1
     47e:	99 f0       	breq	.+38     	; 0x4a6 <DIO_togglepin+0x34>
     480:	28 f0       	brcs	.+10     	; 0x48c <DIO_togglepin+0x1a>
     482:	92 30       	cpi	r25, 0x02	; 2
     484:	e9 f0       	breq	.+58     	; 0x4c0 <DIO_togglepin+0x4e>
     486:	93 30       	cpi	r25, 0x03	; 3
     488:	41 f1       	breq	.+80     	; 0x4da <DIO_togglepin+0x68>
     48a:	08 95       	ret
		{
			case PORT_A:
			TOGGLE_BIT(DIO_PORTA_PORT_REG,pin_num);
     48c:	4b b3       	in	r20, 0x1b	; 27
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	b9 01       	movw	r22, r18
     494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_togglepin+0x28>
     496:	66 0f       	add	r22, r22
     498:	77 1f       	adc	r23, r23
     49a:	8a 95       	dec	r24
     49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_togglepin+0x24>
     49e:	cb 01       	movw	r24, r22
     4a0:	84 27       	eor	r24, r20
     4a2:	8b bb       	out	0x1b, r24	; 27
			break;
     4a4:	08 95       	ret
			case PORT_B:
			TOGGLE_BIT(DIO_PORTB_PORT_REG,pin_num);
     4a6:	48 b3       	in	r20, 0x18	; 24
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	b9 01       	movw	r22, r18
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_togglepin+0x42>
     4b0:	66 0f       	add	r22, r22
     4b2:	77 1f       	adc	r23, r23
     4b4:	8a 95       	dec	r24
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_togglepin+0x3e>
     4b8:	cb 01       	movw	r24, r22
     4ba:	84 27       	eor	r24, r20
     4bc:	88 bb       	out	0x18, r24	; 24
			break;
     4be:	08 95       	ret
			case PORT_C:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
     4c0:	45 b3       	in	r20, 0x15	; 21
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	b9 01       	movw	r22, r18
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_togglepin+0x5c>
     4ca:	66 0f       	add	r22, r22
     4cc:	77 1f       	adc	r23, r23
     4ce:	8a 95       	dec	r24
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_togglepin+0x58>
     4d2:	cb 01       	movw	r24, r22
     4d4:	84 27       	eor	r24, r20
     4d6:	85 bb       	out	0x15, r24	; 21
			break;
     4d8:	08 95       	ret
			case PORT_D:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
     4da:	42 b3       	in	r20, 0x12	; 18
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	b9 01       	movw	r22, r18
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_togglepin+0x76>
     4e4:	66 0f       	add	r22, r22
     4e6:	77 1f       	adc	r23, r23
     4e8:	8a 95       	dec	r24
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_togglepin+0x72>
     4ec:	cb 01       	movw	r24, r22
     4ee:	84 27       	eor	r24, r20
     4f0:	82 bb       	out	0x12, r24	; 18
     4f2:	08 95       	ret

000004f4 <EXT0_INTERRUPT_SetInterruptHandler>:
			break;
		}
		}
	}
	return ret;
}
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	31 f0       	breq	.+12     	; 0x504 <EXT0_INTERRUPT_SetInterruptHandler+0x10>
     4f8:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <INT0_InterruptHandler+0x1>
     4fc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <INT0_InterruptHandler>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	08 95       	ret
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	08 95       	ret

00000508 <EXT1_INTERRUPT_SetInterruptHandler>:
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	31 f0       	breq	.+12     	; 0x518 <EXT1_INTERRUPT_SetInterruptHandler+0x10>
     50c:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <INT1_InterruptHandler+0x1>
     510:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <INT1_InterruptHandler>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 95       	ret
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 95       	ret

0000051c <EXT2_INTERRUPT_SetInterruptHandler>:
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	31 f0       	breq	.+12     	; 0x52c <EXT2_INTERRUPT_SetInterruptHandler+0x10>
     520:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <INT2_InterruptHandler+0x1>
     524:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <INT2_InterruptHandler>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret

00000530 <EXT_INTERRUPT_SetInterruptHandler>:

Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == EXT_INTx)
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	b9 f0       	breq	.+46     	; 0x562 <EXT_INTERRUPT_SetInterruptHandler+0x32>
     534:	fc 01       	movw	r30, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(EXT_INTx->EXTERNAL_INTERRUPRT_Number)
     536:	82 81       	ldd	r24, Z+2	; 0x02
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	49 f0       	breq	.+18     	; 0x54e <EXT_INTERRUPT_SetInterruptHandler+0x1e>
     53c:	18 f0       	brcs	.+6      	; 0x544 <EXT_INTERRUPT_SetInterruptHandler+0x14>
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	59 f0       	breq	.+22     	; 0x558 <EXT_INTERRUPT_SetInterruptHandler+0x28>
     542:	11 c0       	rjmp	.+34     	; 0x566 <EXT_INTERRUPT_SetInterruptHandler+0x36>
		{
			case EXT0_INTERRUPTS:
			{
				ret = EXT0_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EXT0_INTERRUPT_SetInterruptHandler>
				break;
     54c:	08 95       	ret
			}
			case EXT1_INTERRUPTS:
			{
				ret = EXT1_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	0e 94 84 02 	call	0x508	; 0x508 <EXT1_INTERRUPT_SetInterruptHandler>
				break;
     556:	08 95       	ret
			}
			case EXT2_INTERRUPTS:
			{
				ret = EXT2_INTERRUPT_SetInterruptHandler(EXT_INTx->INTERRUPT_EXTERNAL_HANDLER);
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	0e 94 8e 02 	call	0x51c	; 0x51c <EXT2_INTERRUPT_SetInterruptHandler>
				
				break;
     560:	08 95       	ret
{

	Std_ReturnType ret = E_NOT_OK;
	if(PTR_NULL == EXT_INTx)
	{
		ret = E_NOT_OK;
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	08 95       	ret


Std_ReturnType EXT_INTERRUPT_SetInterruptHandler(const ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{

	Std_ReturnType ret = E_NOT_OK;
     566:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
	}
	return ret;
}
     568:	08 95       	ret

0000056a <EXT_vINTERRUPT_Init>:


Std_ReturnType EXT_vINTERRUPT_Init(const  ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	Std_ReturnType ret = E_NOT_OK;

	if(PTR_NULL == EXT_INTx)
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	09 f4       	brne	.+2      	; 0x576 <EXT_vINTERRUPT_Init+0xc>
     574:	97 c0       	rjmp	.+302    	; 0x6a4 <EXT_vINTERRUPT_Init+0x13a>
     576:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		switch(EXT_INTx->EXTERNAL_INTERRUPRT_Number)
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	e9 f1       	breq	.+122    	; 0x5f8 <EXT_vINTERRUPT_Init+0x8e>
     57e:	20 f0       	brcs	.+8      	; 0x588 <EXT_vINTERRUPT_Init+0x1e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	09 f4       	brne	.+2      	; 0x586 <EXT_vINTERRUPT_Init+0x1c>
     584:	71 c0       	rjmp	.+226    	; 0x668 <EXT_vINTERRUPT_Init+0xfe>
     586:	90 c0       	rjmp	.+288    	; 0x6a8 <EXT_vINTERRUPT_Init+0x13e>
		{
			case EXT0_INTERRUPTS:
			{

				if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == LOW_LEVEL_SENSE_CONTROL)
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	81 11       	cpse	r24, r1
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <EXT_vINTERRUPT_Init+0x38>
				{
					MCU_vEnableInterrupt();
     58e:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT0_BITS);
     592:	8b b7       	in	r24, 0x3b	; 59
     594:	80 64       	ori	r24, 0x40	; 64
     596:	8b bf       	out	0x3b, r24	; 59
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC01_BITS);
     598:	85 b7       	in	r24, 0x35	; 53
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC00_BITS);
     59a:	8c 7f       	andi	r24, 0xFC	; 252
     59c:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     59e:	11 e0       	ldi	r17, 0x01	; 1
     5a0:	27 c0       	rjmp	.+78     	; 0x5f0 <EXT_vINTERRUPT_Init+0x86>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == ANY_LOGICAL_SENSE_CONTROL)
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	59 f4       	brne	.+22     	; 0x5bc <EXT_vINTERRUPT_Init+0x52>
				{
					MCU_vEnableInterrupt();
     5a6:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT0_BITS);
     5aa:	8b b7       	in	r24, 0x3b	; 59
     5ac:	80 64       	ori	r24, 0x40	; 64
     5ae:	8b bf       	out	0x3b, r24	; 59
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC01_BITS);
     5b0:	85 b7       	in	r24, 0x35	; 53
     5b2:	8d 7f       	andi	r24, 0xFD	; 253
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC00_BITS);
     5b4:	81 60       	ori	r24, 0x01	; 1
     5b6:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     5b8:	11 e0       	ldi	r17, 0x01	; 1
     5ba:	1a c0       	rjmp	.+52     	; 0x5f0 <EXT_vINTERRUPT_Init+0x86>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == FALLING_EDGE_SENSE_CONTROL)
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	59 f4       	brne	.+22     	; 0x5d6 <EXT_vINTERRUPT_Init+0x6c>
				{
					MCU_vEnableInterrupt();
     5c0:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT0_BITS);
     5c4:	8b b7       	in	r24, 0x3b	; 59
     5c6:	80 64       	ori	r24, 0x40	; 64
     5c8:	8b bf       	out	0x3b, r24	; 59
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC01_BITS);
     5ca:	85 b7       	in	r24, 0x35	; 53
     5cc:	82 60       	ori	r24, 0x02	; 2
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC00_BITS);
     5ce:	8e 7f       	andi	r24, 0xFE	; 254
     5d0:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     5d2:	11 e0       	ldi	r17, 0x01	; 1
     5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <EXT_vINTERRUPT_Init+0x86>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == RISING_EDGE_SENSE_CONTROL)
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	51 f4       	brne	.+20     	; 0x5ee <EXT_vINTERRUPT_Init+0x84>
				{
					MCU_vEnableInterrupt();
     5da:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT0_BITS);
     5de:	8b b7       	in	r24, 0x3b	; 59
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	8b bf       	out	0x3b, r24	; 59
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC01_BITS);
     5e4:	85 b7       	in	r24, 0x35	; 53
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC00_BITS);
     5e6:	83 60       	ori	r24, 0x03	; 3
     5e8:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     5ea:	11 e0       	ldi	r17, 0x01	; 1
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <EXT_vINTERRUPT_Init+0x86>
				}
				else
				{
					ret = E_NOT_OK;
     5ee:	10 e0       	ldi	r17, 0x00	; 0
				}
				EXT_INTERRUPT_SetInterruptHandler(EXT_INTx);
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 98 02 	call	0x530	; 0x530 <EXT_INTERRUPT_SetInterruptHandler>
				break;
     5f6:	59 c0       	rjmp	.+178    	; 0x6aa <EXT_vINTERRUPT_Init+0x140>
			}
			case EXT1_INTERRUPTS:
			{

				if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == LOW_LEVEL_SENSE_CONTROL)
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	81 11       	cpse	r24, r1
     5fc:	0a c0       	rjmp	.+20     	; 0x612 <EXT_vINTERRUPT_Init+0xa8>
				{
					MCU_vEnableInterrupt();
     5fe:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT1_BITS);
     602:	8b b7       	in	r24, 0x3b	; 59
     604:	80 68       	ori	r24, 0x80	; 128
     606:	8b bf       	out	0x3b, r24	; 59
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC11_BITS);
     608:	85 b7       	in	r24, 0x35	; 53
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC10_BITS);
     60a:	83 7f       	andi	r24, 0xF3	; 243
     60c:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	27 c0       	rjmp	.+78     	; 0x660 <EXT_vINTERRUPT_Init+0xf6>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == ANY_LOGICAL_SENSE_CONTROL)
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	59 f4       	brne	.+22     	; 0x62c <EXT_vINTERRUPT_Init+0xc2>
				{
					MCU_vEnableInterrupt();
     616:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT1_BITS);
     61a:	8b b7       	in	r24, 0x3b	; 59
     61c:	80 68       	ori	r24, 0x80	; 128
     61e:	8b bf       	out	0x3b, r24	; 59
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC11_BITS);
     620:	85 b7       	in	r24, 0x35	; 53
     622:	87 7f       	andi	r24, 0xF7	; 247
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC10_BITS);
     624:	84 60       	ori	r24, 0x04	; 4
     626:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     628:	11 e0       	ldi	r17, 0x01	; 1
     62a:	1a c0       	rjmp	.+52     	; 0x660 <EXT_vINTERRUPT_Init+0xf6>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == FALLING_EDGE_SENSE_CONTROL)
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	59 f4       	brne	.+22     	; 0x646 <EXT_vINTERRUPT_Init+0xdc>
				{
					MCU_vEnableInterrupt();
     630:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT1_BITS);
     634:	8b b7       	in	r24, 0x3b	; 59
     636:	80 68       	ori	r24, 0x80	; 128
     638:	8b bf       	out	0x3b, r24	; 59
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC11_BITS);
     63a:	85 b7       	in	r24, 0x35	; 53
     63c:	88 60       	ori	r24, 0x08	; 8
					CLEAR_BIT(MCUCR_REG,MCUCR_REG_ISC10_BITS);
     63e:	8b 7f       	andi	r24, 0xFB	; 251
     640:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     642:	11 e0       	ldi	r17, 0x01	; 1
     644:	0d c0       	rjmp	.+26     	; 0x660 <EXT_vINTERRUPT_Init+0xf6>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == RISING_EDGE_SENSE_CONTROL)
     646:	83 30       	cpi	r24, 0x03	; 3
     648:	51 f4       	brne	.+20     	; 0x65e <EXT_vINTERRUPT_Init+0xf4>
				{
					MCU_vEnableInterrupt();
     64a:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT1_BITS);
     64e:	8b b7       	in	r24, 0x3b	; 59
     650:	80 68       	ori	r24, 0x80	; 128
     652:	8b bf       	out	0x3b, r24	; 59
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC11_BITS);
     654:	85 b7       	in	r24, 0x35	; 53
					SET_BIT(MCUCR_REG,MCUCR_REG_ISC10_BITS);
     656:	8c 60       	ori	r24, 0x0C	; 12
     658:	85 bf       	out	0x35, r24	; 53
					ret = E_OK;
     65a:	11 e0       	ldi	r17, 0x01	; 1
     65c:	01 c0       	rjmp	.+2      	; 0x660 <EXT_vINTERRUPT_Init+0xf6>
				}
				else
				{
					ret = E_NOT_OK;
     65e:	10 e0       	ldi	r17, 0x00	; 0
				}
				EXT_INTERRUPT_SetInterruptHandler(EXT_INTx);
     660:	ce 01       	movw	r24, r28
     662:	0e 94 98 02 	call	0x530	; 0x530 <EXT_INTERRUPT_SetInterruptHandler>
				break;
     666:	21 c0       	rjmp	.+66     	; 0x6aa <EXT_vINTERRUPT_Init+0x140>
			}
			case EXT2_INTERRUPTS:
			{

				if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == FALLING_EDGE_SENSE_CONTROL)
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	51 f4       	brne	.+20     	; 0x682 <EXT_vINTERRUPT_Init+0x118>
				{
					MCU_vEnableInterrupt();
     66e:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT2_BITS);
     672:	8b b7       	in	r24, 0x3b	; 59
     674:	80 62       	ori	r24, 0x20	; 32
     676:	8b bf       	out	0x3b, r24	; 59
					CLEAR_BIT(MCUCSR_REG,MCUCSR_REG_ISC2_BITS);
     678:	84 b7       	in	r24, 0x34	; 52
     67a:	8f 7b       	andi	r24, 0xBF	; 191
     67c:	84 bf       	out	0x34, r24	; 52
					ret = E_OK;
     67e:	11 e0       	ldi	r17, 0x01	; 1
     680:	0d c0       	rjmp	.+26     	; 0x69c <EXT_vINTERRUPT_Init+0x132>
				}
				else if(EXT_INTx->EXTERNAL_INTERRUPRT_Sense_Control == RISING_EDGE_SENSE_CONTROL)
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	51 f4       	brne	.+20     	; 0x69a <EXT_vINTERRUPT_Init+0x130>
				{
					MCU_vEnableInterrupt();
     686:	0e 94 cf 03 	call	0x79e	; 0x79e <MCU_vEnableInterrupt>
					SET_BIT(GICR_REG,GICR_REG_INT2_BITS);
     68a:	8b b7       	in	r24, 0x3b	; 59
     68c:	80 62       	ori	r24, 0x20	; 32
     68e:	8b bf       	out	0x3b, r24	; 59
					SET_BIT(MCUCSR_REG,MCUCSR_REG_ISC2_BITS);
     690:	84 b7       	in	r24, 0x34	; 52
     692:	80 64       	ori	r24, 0x40	; 64
     694:	84 bf       	out	0x34, r24	; 52
					ret = E_OK;
     696:	11 e0       	ldi	r17, 0x01	; 1
     698:	01 c0       	rjmp	.+2      	; 0x69c <EXT_vINTERRUPT_Init+0x132>
				}
				else
				{
					ret = E_NOT_OK;
     69a:	10 e0       	ldi	r17, 0x00	; 0
				}
				EXT_INTERRUPT_SetInterruptHandler(EXT_INTx);
     69c:	ce 01       	movw	r24, r28
     69e:	0e 94 98 02 	call	0x530	; 0x530 <EXT_INTERRUPT_SetInterruptHandler>
				break;
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <EXT_vINTERRUPT_Init+0x140>
{
	Std_ReturnType ret = E_NOT_OK;

	if(PTR_NULL == EXT_INTx)
	{
		ret = E_NOT_OK;
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <EXT_vINTERRUPT_Init+0x140>
}


Std_ReturnType EXT_vINTERRUPT_Init(const  ST_EXT_INTERRUPTS_CFG *EXT_INTx)
{
	Std_ReturnType ret = E_NOT_OK;
     6a8:	10 e0       	ldi	r17, 0x00	; 0
				break;
			}
		}
	}
	return ret;
}
     6aa:	81 2f       	mov	r24, r17
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	08 95       	ret

000006b4 <__vector_1>:


ISR(EXT_INT0)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
	INT0_InterruptHandler();
     6d6:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <INT0_InterruptHandler>
     6da:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <INT0_InterruptHandler+0x1>
     6de:	09 95       	icall
}
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_2>:
ISR(EXT_INT1)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	INT1_InterruptHandler();
     724:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <INT1_InterruptHandler>
     728:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <INT1_InterruptHandler+0x1>
     72c:	09 95       	icall
}
     72e:	ff 91       	pop	r31
     730:	ef 91       	pop	r30
     732:	bf 91       	pop	r27
     734:	af 91       	pop	r26
     736:	9f 91       	pop	r25
     738:	8f 91       	pop	r24
     73a:	7f 91       	pop	r23
     73c:	6f 91       	pop	r22
     73e:	5f 91       	pop	r21
     740:	4f 91       	pop	r20
     742:	3f 91       	pop	r19
     744:	2f 91       	pop	r18
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <__vector_3>:
ISR(EXT_INT2)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	2f 93       	push	r18
     75c:	3f 93       	push	r19
     75e:	4f 93       	push	r20
     760:	5f 93       	push	r21
     762:	6f 93       	push	r22
     764:	7f 93       	push	r23
     766:	8f 93       	push	r24
     768:	9f 93       	push	r25
     76a:	af 93       	push	r26
     76c:	bf 93       	push	r27
     76e:	ef 93       	push	r30
     770:	ff 93       	push	r31
	INT2_InterruptHandler();
     772:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <INT2_InterruptHandler>
     776:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <INT2_InterruptHandler+0x1>
     77a:	09 95       	icall
}
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <MCU_vEnableInterrupt>:

#include"MCU_Interface.h"

void MCU_vEnableInterrupt(void)
{
	SET_BIT(SREG_REG,7);
     79e:	8f b7       	in	r24, 0x3f	; 63
     7a0:	80 68       	ori	r24, 0x80	; 128
     7a2:	8f bf       	out	0x3f, r24	; 63
     7a4:	08 95       	ret

000007a6 <TIMER_TMR2NormalModeInit>:

void TIMER_tmr0deinit(void)
{
    TIMER_timer0Stop();
	//* Disable the interrupt for timer1 overflow.*//*
	CLEAR_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT);    
     7a6:	88 23       	and	r24, r24
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <TIMER_TMR2NormalModeInit+0xa>
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	79 f0       	breq	.+30     	; 0x7cc <TIMER_TMR2NormalModeInit+0x26>
     7ae:	16 c0       	rjmp	.+44     	; 0x7dc <TIMER_TMR2NormalModeInit+0x36>
     7b0:	85 b5       	in	r24, 0x25	; 37
     7b2:	8f 7b       	andi	r24, 0xBF	; 191
     7b4:	85 bd       	out	0x25, r24	; 37
     7b6:	85 b5       	in	r24, 0x25	; 37
     7b8:	87 7f       	andi	r24, 0xF7	; 247
     7ba:	85 bd       	out	0x25, r24	; 37
     7bc:	8f b7       	in	r24, 0x3f	; 63
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	8f bf       	out	0x3f, r24	; 63
     7c2:	89 b7       	in	r24, 0x39	; 57
     7c4:	80 64       	ori	r24, 0x40	; 64
     7c6:	89 bf       	out	0x39, r24	; 57
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	08 95       	ret
     7cc:	85 b5       	in	r24, 0x25	; 37
     7ce:	8f 7b       	andi	r24, 0xBF	; 191
     7d0:	85 bd       	out	0x25, r24	; 37
     7d2:	85 b5       	in	r24, 0x25	; 37
     7d4:	87 7f       	andi	r24, 0xF7	; 247
     7d6:	85 bd       	out	0x25, r24	; 37
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret

000007e0 <TMR_intDelay_ms>:
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	bc 01       	movw	r22, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__floatunsisf>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	4a e7       	ldi	r20, 0x7A	; 122
     7f8:	54 e4       	ldi	r21, 0x44	; 68
     7fa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__divsf3>
     7fe:	6b 01       	movw	r12, r22
     800:	7c 01       	movw	r14, r24
     802:	27 e3       	ldi	r18, 0x37	; 55
     804:	37 e3       	ldi	r19, 0x37	; 55
     806:	46 e8       	ldi	r20, 0x86	; 134
     808:	55 e4       	ldi	r21, 0x45	; 69
     80a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__gesf2>
     80e:	18 16       	cp	r1, r24
     810:	0c f4       	brge	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	9e c0       	rjmp	.+316    	; 0x950 <__stack+0xf1>
     814:	15 bc       	out	0x25, r1	; 37
     816:	2d eb       	ldi	r18, 0xBD	; 189
     818:	37 e3       	ldi	r19, 0x37	; 55
     81a:	46 e8       	ldi	r20, 0x86	; 134
     81c:	5d e3       	ldi	r21, 0x3D	; 61
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 3a 07 	call	0xe74	; 0xe74 <__cmpsf2>
     826:	88 23       	and	r24, r24
     828:	f4 f5       	brge	.+124    	; 0x8a6 <__stack+0x47>
     82a:	2d eb       	ldi	r18, 0xBD	; 189
     82c:	37 e3       	ldi	r19, 0x37	; 55
     82e:	46 e8       	ldi	r20, 0x86	; 134
     830:	5d e3       	ldi	r21, 0x3D	; 61
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__divsf3>
     83a:	0e 94 23 07 	call	0xe46	; 0xe46 <ceil>
     83e:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixunssfsi>
     842:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <u16_g_overflow2Numbers+0x1>
     846:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <u16_g_overflow2Numbers>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__floatunsisf>
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e8       	ldi	r20, 0x80	; 128
     858:	5f e3       	ldi	r21, 0x3F	; 63
     85a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     85e:	2d eb       	ldi	r18, 0xBD	; 189
     860:	37 e3       	ldi	r19, 0x37	; 55
     862:	46 e8       	ldi	r20, 0x86	; 134
     864:	5d e3       	ldi	r21, 0x3D	; 61
     866:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	c7 01       	movw	r24, r14
     870:	b6 01       	movw	r22, r12
     872:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     876:	23 eb       	ldi	r18, 0xB3	; 179
     878:	3f ee       	ldi	r19, 0xEF	; 239
     87a:	4a e8       	ldi	r20, 0x8A	; 138
     87c:	59 e3       	ldi	r21, 0x39	; 57
     87e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__divsf3>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 e8       	ldi	r24, 0x80	; 128
     88c:	93 e4       	ldi	r25, 0x43	; 67
     88e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     892:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixunssfsi>
     896:	64 bd       	out	0x24, r22	; 36
     898:	84 b5       	in	r24, 0x24	; 36
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <u16_g_tcnt2InitialVal+0x1>
     8a0:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <u16_g_tcnt2InitialVal>
     8a4:	4f c0       	rjmp	.+158    	; 0x944 <__stack+0xe5>
     8a6:	2d eb       	ldi	r18, 0xBD	; 189
     8a8:	37 e3       	ldi	r19, 0x37	; 55
     8aa:	46 e8       	ldi	r20, 0x86	; 134
     8ac:	5d e3       	ldi	r21, 0x3D	; 61
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	0e 94 3a 07 	call	0xe74	; 0xe74 <__cmpsf2>
     8b6:	81 11       	cpse	r24, r1
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__stack+0x6b>
     8ba:	14 bc       	out	0x24, r1	; 36
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <u16_g_overflow2Numbers+0x1>
     8c4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u16_g_overflow2Numbers>
     8c8:	3d c0       	rjmp	.+122    	; 0x944 <__stack+0xe5>
     8ca:	2d eb       	ldi	r18, 0xBD	; 189
     8cc:	37 e3       	ldi	r19, 0x37	; 55
     8ce:	46 e8       	ldi	r20, 0x86	; 134
     8d0:	5d e3       	ldi	r21, 0x3D	; 61
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__divsf3>
     8da:	0e 94 23 07 	call	0xe46	; 0xe46 <ceil>
     8de:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixunssfsi>
     8e2:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <u16_g_overflow2Numbers+0x1>
     8e6:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <u16_g_overflow2Numbers>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__floatunsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e8       	ldi	r20, 0x80	; 128
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     8fe:	2d eb       	ldi	r18, 0xBD	; 189
     900:	37 e3       	ldi	r19, 0x37	; 55
     902:	46 e8       	ldi	r20, 0x86	; 134
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__mulsf3>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     916:	23 eb       	ldi	r18, 0xB3	; 179
     918:	3f ee       	ldi	r19, 0xEF	; 239
     91a:	4a e8       	ldi	r20, 0x8A	; 138
     91c:	59 e3       	ldi	r21, 0x39	; 57
     91e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__divsf3>
     922:	9b 01       	movw	r18, r22
     924:	ac 01       	movw	r20, r24
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	93 e4       	ldi	r25, 0x43	; 67
     92e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__subsf3>
     932:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fixunssfsi>
     936:	64 bd       	out	0x24, r22	; 36
     938:	84 b5       	in	r24, 0x24	; 36
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <u16_g_tcnt2InitialVal+0x1>
     940:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <u16_g_tcnt2InitialVal>
     944:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <u16_g_overflow2Ticks+0x1>
     948:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <u16_g_overflow2Ticks>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0xf3>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <TIMER_TMR2Start>:
     95c:	80 34       	cpi	r24, 0x40	; 64
     95e:	91 05       	cpc	r25, r1
     960:	c1 f1       	breq	.+112    	; 0x9d2 <TIMER_TMR2Start+0x76>
     962:	50 f4       	brcc	.+20     	; 0x978 <TIMER_TMR2Start+0x1c>
     964:	88 30       	cpi	r24, 0x08	; 8
     966:	91 05       	cpc	r25, r1
     968:	01 f1       	breq	.+64     	; 0x9aa <TIMER_TMR2Start+0x4e>
     96a:	80 32       	cpi	r24, 0x20	; 32
     96c:	91 05       	cpc	r25, r1
     96e:	41 f1       	breq	.+80     	; 0x9c0 <TIMER_TMR2Start+0x64>
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	09 f0       	breq	.+2      	; 0x976 <TIMER_TMR2Start+0x1a>
     974:	58 c0       	rjmp	.+176    	; 0xa26 <TIMER_TMR2Start+0xca>
     976:	0e c0       	rjmp	.+28     	; 0x994 <TIMER_TMR2Start+0x38>
     978:	81 15       	cp	r24, r1
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	92 07       	cpc	r25, r18
     97e:	e9 f1       	breq	.+122    	; 0x9fa <TIMER_TMR2Start+0x9e>
     980:	81 15       	cp	r24, r1
     982:	24 e0       	ldi	r18, 0x04	; 4
     984:	92 07       	cpc	r25, r18
     986:	09 f4       	brne	.+2      	; 0x98a <TIMER_TMR2Start+0x2e>
     988:	43 c0       	rjmp	.+134    	; 0xa10 <TIMER_TMR2Start+0xb4>
     98a:	80 38       	cpi	r24, 0x80	; 128
     98c:	91 05       	cpc	r25, r1
     98e:	09 f0       	breq	.+2      	; 0x992 <TIMER_TMR2Start+0x36>
     990:	4a c0       	rjmp	.+148    	; 0xa26 <TIMER_TMR2Start+0xca>
     992:	28 c0       	rjmp	.+80     	; 0x9e4 <TIMER_TMR2Start+0x88>
     994:	85 b5       	in	r24, 0x25	; 37
     996:	8d 7f       	andi	r24, 0xFD	; 253
     998:	85 bd       	out	0x25, r24	; 37
     99a:	85 b5       	in	r24, 0x25	; 37
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	85 bd       	out	0x25, r24	; 37
     9a0:	85 b5       	in	r24, 0x25	; 37
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	85 bd       	out	0x25, r24	; 37
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
     9aa:	85 b5       	in	r24, 0x25	; 37
     9ac:	8e 7f       	andi	r24, 0xFE	; 254
     9ae:	85 bd       	out	0x25, r24	; 37
     9b0:	85 b5       	in	r24, 0x25	; 37
     9b2:	8b 7f       	andi	r24, 0xFB	; 251
     9b4:	85 bd       	out	0x25, r24	; 37
     9b6:	85 b5       	in	r24, 0x25	; 37
     9b8:	82 60       	ori	r24, 0x02	; 2
     9ba:	85 bd       	out	0x25, r24	; 37
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret
     9c0:	85 b5       	in	r24, 0x25	; 37
     9c2:	8b 7f       	andi	r24, 0xFB	; 251
     9c4:	85 bd       	out	0x25, r24	; 37
     9c6:	85 b5       	in	r24, 0x25	; 37
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	85 bd       	out	0x25, r24	; 37
     9cc:	85 b5       	in	r24, 0x25	; 37
     9ce:	81 60       	ori	r24, 0x01	; 1
     9d0:	85 bd       	out	0x25, r24	; 37
     9d2:	85 b5       	in	r24, 0x25	; 37
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	85 bd       	out	0x25, r24	; 37
     9d8:	85 b5       	in	r24, 0x25	; 37
     9da:	8d 7f       	andi	r24, 0xFD	; 253
     9dc:	85 bd       	out	0x25, r24	; 37
     9de:	85 b5       	in	r24, 0x25	; 37
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	85 bd       	out	0x25, r24	; 37
     9e4:	85 b5       	in	r24, 0x25	; 37
     9e6:	8b 7f       	andi	r24, 0xFB	; 251
     9e8:	85 bd       	out	0x25, r24	; 37
     9ea:	85 b5       	in	r24, 0x25	; 37
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	85 bd       	out	0x25, r24	; 37
     9f0:	85 b5       	in	r24, 0x25	; 37
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	85 bd       	out	0x25, r24	; 37
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
     9fa:	85 b5       	in	r24, 0x25	; 37
     9fc:	82 60       	ori	r24, 0x02	; 2
     9fe:	85 bd       	out	0x25, r24	; 37
     a00:	85 b5       	in	r24, 0x25	; 37
     a02:	8e 7f       	andi	r24, 0xFE	; 254
     a04:	85 bd       	out	0x25, r24	; 37
     a06:	85 b5       	in	r24, 0x25	; 37
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	85 bd       	out	0x25, r24	; 37
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
     a10:	85 b5       	in	r24, 0x25	; 37
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	85 bd       	out	0x25, r24	; 37
     a16:	85 b5       	in	r24, 0x25	; 37
     a18:	84 60       	ori	r24, 0x04	; 4
     a1a:	85 bd       	out	0x25, r24	; 37
     a1c:	85 b5       	in	r24, 0x25	; 37
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	85 bd       	out	0x25, r24	; 37
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	08 95       	ret

00000a2a <TMR_TMR2Stop>:
     a2a:	85 b5       	in	r24, 0x25	; 37
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	85 bd       	out	0x25, r24	; 37
     a30:	85 b5       	in	r24, 0x25	; 37
     a32:	8d 7f       	andi	r24, 0xFD	; 253
     a34:	85 bd       	out	0x25, r24	; 37
     a36:	85 b5       	in	r24, 0x25	; 37
     a38:	8b 7f       	andi	r24, 0xFB	; 251
     a3a:	85 bd       	out	0x25, r24	; 37
     a3c:	08 95       	ret

00000a3e <TIMER_tmr2deinit>:



void TIMER_tmr2deinit(void)
{
    TMR_TMR2Stop();
     a3e:	0e 94 15 05 	call	0xa2a	; 0xa2a <TMR_TMR2Stop>
	//* Disable the interrupt for timer1 overflow.*//*
	CLEAR_BIT(TMR_U8_TIMSK_REG, TMR_U8_TOIE2_BIT);    
     a42:	89 b7       	in	r24, 0x39	; 57
     a44:	8f 7b       	andi	r24, 0xBF	; 191
     a46:	89 bf       	out	0x39, r24	; 57
     a48:	08 95       	ret

00000a4a <TMR_ovfSetCallback>:
 * @param void_a_pfOvfInterruptAction Pointer to the function to be called on TMR overflow interrupt
 * @return EN_TMR_ERROR_T Returns TMR_OK if callback function is set successfully, else returns TMR_ERROR
 */
EN_TIMER_ERROR_T TMR_ovfSetCallback(void (*void_a_pfOvfInterruptAction)(void)) {
    // Check if the Pointer to Function is not equal to NULL
    if (void_a_pfOvfInterruptAction != PTR_NULL) {
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	31 f0       	breq	.+12     	; 0xa5a <TMR_ovfSetCallback+0x10>
        // Store the passed address of function ( in APP Layer ) through pointer to function ( OVFInterruptAction ) into Global Array of Pointers to Functions ( OVFInterruptsAction ) in the passed index ( TMRId ).
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
     a4e:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <void_g_pfOvfInterruptAction+0x1>
     a52:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <void_g_pfOvfInterruptAction>
        return TIMER_OK;
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
    } else {
        return TIMER_ERROR;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     a5c:	08 95       	ret

00000a5e <__vector_5>:
 */
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

ISR(TIM2_OVF_INT)
{
     a5e:	1f 92       	push	r1
     a60:	0f 92       	push	r0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	0f 92       	push	r0
     a66:	11 24       	eor	r1, r1
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
	u16_g_overflow2Ticks++;
     a80:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u16_g_overflow2Ticks>
     a84:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <u16_g_overflow2Ticks+0x1>
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <u16_g_overflow2Ticks+0x1>
     a8e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <u16_g_overflow2Ticks>
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
     a92:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <u16_g_overflow2Numbers>
     a96:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <u16_g_overflow2Numbers+0x1>
     a9a:	82 17       	cp	r24, r18
     a9c:	93 07       	cpc	r25, r19
     a9e:	60 f0       	brcs	.+24     	; 0xab8 <__vector_5+0x5a>
	{
		TMR_U8_TCNT2_REG = u16_g_tcnt2InitialVal;
     aa0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <u16_g_tcnt2InitialVal>
     aa4:	84 bd       	out	0x24, r24	; 36
		u16_g_overflow2Ticks = 0;
     aa6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <u16_g_overflow2Ticks+0x1>
     aaa:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <u16_g_overflow2Ticks>
		void_g_pfOvfInterruptAction();
     aae:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <void_g_pfOvfInterruptAction>
     ab2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <void_g_pfOvfInterruptAction+0x1>
     ab6:	09 95       	icall
	}
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <is_tick_done>:
			}
		}
	}
	
	return enu_system_status_retval;
}
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <gl_system_tick>
     ae0:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <gl_ticks_counter>
     ae4:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <gl_ticks_counter+0x1>
     ae8:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <gl_ticks_counter+0x2>
     aec:	50 91 98 00 	lds	r21, 0x0098	; 0x800098 <gl_ticks_counter+0x3>
     af0:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <gl_ticks_counter+0x4>
     af4:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <gl_ticks_counter+0x5>
     af8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <gl_ticks_counter+0x6>
     afc:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <gl_ticks_counter+0x7>
     b00:	a1 e0       	ldi	r26, 0x01	; 1
     b02:	0e 94 a4 09 	call	0x1348	; 0x1348 <__adddi3_s8>
     b06:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <gl_ticks_counter>
     b0a:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <gl_ticks_counter+0x1>
     b0e:	40 93 97 00 	sts	0x0097, r20	; 0x800097 <gl_ticks_counter+0x2>
     b12:	50 93 98 00 	sts	0x0098, r21	; 0x800098 <gl_ticks_counter+0x3>
     b16:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <gl_ticks_counter+0x4>
     b1a:	70 93 9a 00 	sts	0x009A, r23	; 0x80009a <gl_ticks_counter+0x5>
     b1e:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <gl_ticks_counter+0x6>
     b22:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <gl_ticks_counter+0x7>
     b26:	2f 3f       	cpi	r18, 0xFF	; 255
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	4f 4f       	sbci	r20, 0xFF	; 255
     b2c:	5f 47       	sbci	r21, 0x7F	; 127
     b2e:	61 05       	cpc	r22, r1
     b30:	71 05       	cpc	r23, r1
     b32:	81 05       	cpc	r24, r1
     b34:	91 05       	cpc	r25, r1
     b36:	81 f4       	brne	.+32     	; 0xb58 <is_tick_done+0x7e>
     b38:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <gl_ticks_counter>
     b3c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <gl_ticks_counter+0x1>
     b40:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <gl_ticks_counter+0x2>
     b44:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <gl_ticks_counter+0x3>
     b48:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <gl_ticks_counter+0x4>
     b4c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <gl_ticks_counter+0x5>
     b50:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gl_ticks_counter+0x6>
     b54:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <gl_ticks_counter+0x7>
     b58:	08 95       	ret

00000b5a <sos_init>:
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <gl_is_init>
     b62:	81 11       	cpse	r24, r1
     b64:	23 c0       	rjmp	.+70     	; 0xbac <sos_init+0x52>
     b66:	c8 e7       	ldi	r28, 0x78	; 120
     b68:	d0 e0       	ldi	r29, 0x00	; 0
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	09 95       	icall
     b74:	e9 85       	ldd	r30, Y+9	; 0x09
     b76:	fa 85       	ldd	r31, Y+10	; 0x0a
     b78:	84 e6       	ldi	r24, 0x64	; 100
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	09 95       	icall
     b7e:	eb 85       	ldd	r30, Y+11	; 0x0b
     b80:	fc 85       	ldd	r31, Y+12	; 0x0c
     b82:	8d e6       	ldi	r24, 0x6D	; 109
     b84:	95 e0       	ldi	r25, 0x05	; 5
     b86:	09 95       	icall
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <gl_is_init>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <sos_init+0x4a>
     b92:	e8 2f       	mov	r30, r24
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	e1 56       	subi	r30, 0x61	; 97
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	8a 30       	cpi	r24, 0x0A	; 10
     ba6:	a8 f3       	brcs	.-22     	; 0xb92 <sos_init+0x38>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	01 c0       	rjmp	.+2      	; 0xbae <sos_init+0x54>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <sos_create_task>:
     bb4:	61 15       	cp	r22, r1
     bb6:	71 05       	cpc	r23, r1
     bb8:	f9 f0       	breq	.+62     	; 0xbf8 <sos_create_task+0x44>
     bba:	fb 01       	movw	r30, r22
     bbc:	22 81       	ldd	r18, Z+2	; 0x02
     bbe:	33 81       	ldd	r19, Z+3	; 0x03
     bc0:	23 2b       	or	r18, r19
     bc2:	e1 f0       	breq	.+56     	; 0xbfc <sos_create_task+0x48>
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	23 2b       	or	r18, r19
     bca:	d1 f0       	breq	.+52     	; 0xc00 <sos_create_task+0x4c>
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	f9 01       	movw	r30, r18
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	e1 56       	subi	r30, 0x61	; 97
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	40 81       	ld	r20, Z
     bdc:	51 81       	ldd	r21, Z+1	; 0x01
     bde:	45 2b       	or	r20, r21
     be0:	89 f4       	brne	.+34     	; 0xc04 <sos_create_task+0x50>
     be2:	8a 30       	cpi	r24, 0x0A	; 10
     be4:	88 f4       	brcc	.+34     	; 0xc08 <sos_create_task+0x54>
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	f9 01       	movw	r30, r18
     bec:	e1 56       	subi	r30, 0x61	; 97
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	71 83       	std	Z+1, r23	; 0x01
     bf2:	60 83       	st	Z, r22
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 95       	ret
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	08 95       	ret
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	08 95       	ret
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	08 95       	ret
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	08 95       	ret
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	08 95       	ret

00000c0c <sos_run>:


enu_system_status_t sos_run(void)
{
     c0c:	8f 92       	push	r8
     c0e:	9f 92       	push	r9
     c10:	af 92       	push	r10
     c12:	bf 92       	push	r11
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
	enu_system_status_t enu_system_status_retval = SOS_STATUS_SUCCESS;
	Uint8_t uint8_loc_counter = FALSE;
	
	// check if database is not empty
	for(uint8_loc_counter = FALSE; uint8_loc_counter < MAX_TASKS ; uint8_loc_counter++)
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <sos_run+0x30>
	{
		if(gl_tasks_db[uint8_loc_counter] != PTR_NULL)
     c26:	e8 2f       	mov	r30, r24
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e1 56       	subi	r30, 0x61	; 97
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	20 81       	ld	r18, Z
     c34:	31 81       	ldd	r19, Z+1	; 0x01
     c36:	23 2b       	or	r18, r19
     c38:	19 f4       	brne	.+6      	; 0xc40 <sos_run+0x34>
{
	enu_system_status_t enu_system_status_retval = SOS_STATUS_SUCCESS;
	Uint8_t uint8_loc_counter = FALSE;
	
	// check if database is not empty
	for(uint8_loc_counter = FALSE; uint8_loc_counter < MAX_TASKS ; uint8_loc_counter++)
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	8a 30       	cpi	r24, 0x0A	; 10
     c3e:	98 f3       	brcs	.-26     	; 0xc26 <sos_run+0x1a>
			break;
		}
	}
	
	// in case of empty db
	if(uint8_loc_counter == MAX_TASKS)
     c40:	8a 30       	cpi	r24, 0x0A	; 10
     c42:	09 f4       	brne	.+2      	; 0xc46 <sos_run+0x3a>
     c44:	62 c0       	rjmp	.+196    	; 0xd0a <sos_run+0xfe>
		enu_system_status_retval =  SOS_NO_TASKS_TO_RUN;
	}
	else
	{
		// run state is idle
		gl_running_state = IDLE;
     c46:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gl_running_state>
		// start the timer
		gl_str_sos_configs.str_sos_timer_functions.ptr_timer_start(TIMER_PRESCALLER);
     c4a:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <gl_str_sos_configs+0x5>
     c4e:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <gl_str_sos_configs+0x6>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	09 95       	icall

		while(1)
		{
			// check on running state
			if(gl_running_state == RUNNING_DISABLED)
     c58:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gl_running_state>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	09 f4       	brne	.+2      	; 0xc62 <sos_run+0x56>
     c60:	56 c0       	rjmp	.+172    	; 0xd0e <sos_run+0x102>
			{
				enu_system_status_retval = SOS_RUNNING_DISABLED;
				break;// break while loop
			}
			switch(gl_running_state)
     c62:	88 23       	and	r24, r24
     c64:	21 f0       	breq	.+8      	; 0xc6e <sos_run+0x62>
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	09 f4       	brne	.+2      	; 0xc6c <sos_run+0x60>
     c6a:	46 c0       	rjmp	.+140    	; 0xcf8 <sos_run+0xec>
     c6c:	f5 cf       	rjmp	.-22     	; 0xc58 <sos_run+0x4c>
			{
				
				case IDLE:
				{
					//wait for system tick
					if(gl_system_tick == TRUE)
     c6e:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <gl_system_tick>
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	89 f7       	brne	.-30     	; 0xc58 <sos_run+0x4c>
					{
						gl_running_state = RUNNING;
     c76:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gl_running_state>
     c7a:	ee cf       	rjmp	.-36     	; 0xc58 <sos_run+0x4c>
				{
					
					for(uint8_loc_counter = FALSE; uint8_loc_counter < MAX_TASKS ; uint8_loc_counter++)
					{
						//check if there's a task. if it ready it will execute
						if(gl_tasks_db[uint8_loc_counter] != PTR_NULL && (gl_ticks_counter % gl_tasks_db[uint8_loc_counter]->taskPeriodicity == FALSE ))
     c7c:	ec 2f       	mov	r30, r28
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e1 56       	subi	r30, 0x61	; 97
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 80       	ld	r8, Z
     c8a:	91 80       	ldd	r9, Z+1	; 0x01
     c8c:	81 14       	cp	r8, r1
     c8e:	91 04       	cpc	r9, r1
     c90:	89 f1       	breq	.+98     	; 0xcf4 <sos_run+0xe8>
     c92:	d4 01       	movw	r26, r8
     c94:	0d 91       	ld	r16, X+
     c96:	1c 91       	ld	r17, X
     c98:	b0 91 95 00 	lds	r27, 0x0095	; 0x800095 <gl_ticks_counter>
     c9c:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <gl_ticks_counter+0x1>
     ca0:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <gl_ticks_counter+0x2>
     ca4:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <gl_ticks_counter+0x3>
     ca8:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <gl_ticks_counter+0x4>
     cac:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <gl_ticks_counter+0x5>
     cb0:	a0 2e       	mov	r10, r16
     cb2:	b1 2e       	mov	r11, r17
     cb4:	c1 2c       	mov	r12, r1
     cb6:	d1 2c       	mov	r13, r1
     cb8:	e1 2c       	mov	r14, r1
     cba:	f1 2c       	mov	r15, r1
     cbc:	00 e0       	ldi	r16, 0x00	; 0
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	2b 2f       	mov	r18, r27
     cc2:	3a 2f       	mov	r19, r26
     cc4:	4f 2f       	mov	r20, r31
     cc6:	5e 2f       	mov	r21, r30
     cc8:	69 2f       	mov	r22, r25
     cca:	78 2f       	mov	r23, r24
     ccc:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <gl_ticks_counter+0x6>
     cd0:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <gl_ticks_counter+0x7>
     cd4:	0e 94 45 09 	call	0x128a	; 0x128a <__umoddi3>
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	0e 94 b0 09 	call	0x1360	; 0x1360 <__cmpdi2_s8>
     cde:	51 f4       	brne	.+20     	; 0xcf4 <sos_run+0xe8>
						{
							gl_tasks_db[uint8_loc_counter]->ptr_task_ref(gl_tasks_db[uint8_loc_counter]->ptr_task_arg);
     ce0:	d4 01       	movw	r26, r8
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	13 97       	sbiw	r26, 0x03	; 3
     cea:	14 96       	adiw	r26, 0x04	; 4
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	15 97       	sbiw	r26, 0x05	; 5
     cf2:	09 95       	icall
				}
				
				case RUNNING:
				{
					
					for(uint8_loc_counter = FALSE; uint8_loc_counter < MAX_TASKS ; uint8_loc_counter++)
     cf4:	cf 5f       	subi	r28, 0xFF	; 255
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <sos_run+0xee>
			if(gl_running_state == RUNNING_DISABLED)
			{
				enu_system_status_retval = SOS_RUNNING_DISABLED;
				break;// break while loop
			}
			switch(gl_running_state)
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
				case RUNNING:
				{
					
					for(uint8_loc_counter = FALSE; uint8_loc_counter < MAX_TASKS ; uint8_loc_counter++)
     cfa:	ca 30       	cpi	r28, 0x0A	; 10
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <sos_run+0xf4>
     cfe:	be cf       	rjmp	.-132    	; 0xc7c <sos_run+0x70>
							gl_tasks_db[uint8_loc_counter]->ptr_task_ref(gl_tasks_db[uint8_loc_counter]->ptr_task_arg);
						}
					}
					
					//wait for the next tick
					gl_system_tick = FALSE;
     d00:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gl_system_tick>
					gl_running_state = IDLE;
     d04:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gl_running_state>
					
					break;
     d08:	a7 cf       	rjmp	.-178    	; 0xc58 <sos_run+0x4c>
	}
	
	// in case of empty db
	if(uint8_loc_counter == MAX_TASKS)
	{
		enu_system_status_retval =  SOS_NO_TASKS_TO_RUN;
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <sos_run+0x104>
		while(1)
		{
			// check on running state
			if(gl_running_state == RUNNING_DISABLED)
			{
				enu_system_status_retval = SOS_RUNNING_DISABLED;
     d0e:	88 e0       	ldi	r24, 0x08	; 8
		}//end while
	
	}//end else
		
	return enu_system_status_retval;
}
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	08 95       	ret

00000d28 <sos_disable>:
enu_system_status_t sos_disable(void)
{
	enu_system_status_t enu_system_status_retval = SOS_STATUS_SUCCESS;
	if(gl_running_state != RUNNING_DISABLED)
     d28:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gl_running_state>
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	e1 f0       	breq	.+56     	; 0xd68 <sos_disable+0x40>
	{
		gl_running_state = RUNNING_DISABLED;
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gl_running_state>
		gl_system_tick   = FALSE;
     d36:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gl_system_tick>
		gl_ticks_counter = FALSE;
     d3a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <gl_ticks_counter>
     d3e:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <gl_ticks_counter+0x1>
     d42:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <gl_ticks_counter+0x2>
     d46:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <gl_ticks_counter+0x3>
     d4a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <gl_ticks_counter+0x4>
     d4e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <gl_ticks_counter+0x5>
     d52:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gl_ticks_counter+0x6>
     d56:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <gl_ticks_counter+0x7>
		gl_str_sos_configs.str_sos_timer_functions.ptr_timer_stop();
     d5a:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <gl_str_sos_configs+0x7>
     d5e:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <gl_str_sos_configs+0x8>
     d62:	09 95       	icall
		
	return enu_system_status_retval;
}
enu_system_status_t sos_disable(void)
{
	enu_system_status_t enu_system_status_retval = SOS_STATUS_SUCCESS;
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	08 95       	ret
		gl_str_sos_configs.str_sos_timer_functions.ptr_timer_stop();
	}
	else
	{
		// case of duplicated disable calling or sos is not running
		enu_system_status_retval = SOS_STATUS_INVALID_STATE;
     d68:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return enu_system_status_retval;
     d6a:	08 95       	ret

00000d6c <__subsf3>:
     d6c:	50 58       	subi	r21, 0x80	; 128

00000d6e <__addsf3>:
     d6e:	bb 27       	eor	r27, r27
     d70:	aa 27       	eor	r26, r26
     d72:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__addsf3x>
     d76:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_round>
     d7a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_pscA>
     d7e:	38 f0       	brcs	.+14     	; 0xd8e <__addsf3+0x20>
     d80:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_pscB>
     d84:	20 f0       	brcs	.+8      	; 0xd8e <__addsf3+0x20>
     d86:	39 f4       	brne	.+14     	; 0xd96 <__addsf3+0x28>
     d88:	9f 3f       	cpi	r25, 0xFF	; 255
     d8a:	19 f4       	brne	.+6      	; 0xd92 <__addsf3+0x24>
     d8c:	26 f4       	brtc	.+8      	; 0xd96 <__addsf3+0x28>
     d8e:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_nan>
     d92:	0e f4       	brtc	.+2      	; 0xd96 <__addsf3+0x28>
     d94:	e0 95       	com	r30
     d96:	e7 fb       	bst	r30, 7
     d98:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>

00000d9c <__addsf3x>:
     d9c:	e9 2f       	mov	r30, r25
     d9e:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_split3>
     da2:	58 f3       	brcs	.-42     	; 0xd7a <__addsf3+0xc>
     da4:	ba 17       	cp	r27, r26
     da6:	62 07       	cpc	r22, r18
     da8:	73 07       	cpc	r23, r19
     daa:	84 07       	cpc	r24, r20
     dac:	95 07       	cpc	r25, r21
     dae:	20 f0       	brcs	.+8      	; 0xdb8 <__addsf3x+0x1c>
     db0:	79 f4       	brne	.+30     	; 0xdd0 <__addsf3x+0x34>
     db2:	a6 f5       	brtc	.+104    	; 0xe1c <__addsf3x+0x80>
     db4:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_zero>
     db8:	0e f4       	brtc	.+2      	; 0xdbc <__addsf3x+0x20>
     dba:	e0 95       	com	r30
     dbc:	0b 2e       	mov	r0, r27
     dbe:	ba 2f       	mov	r27, r26
     dc0:	a0 2d       	mov	r26, r0
     dc2:	0b 01       	movw	r0, r22
     dc4:	b9 01       	movw	r22, r18
     dc6:	90 01       	movw	r18, r0
     dc8:	0c 01       	movw	r0, r24
     dca:	ca 01       	movw	r24, r20
     dcc:	a0 01       	movw	r20, r0
     dce:	11 24       	eor	r1, r1
     dd0:	ff 27       	eor	r31, r31
     dd2:	59 1b       	sub	r21, r25
     dd4:	99 f0       	breq	.+38     	; 0xdfc <__addsf3x+0x60>
     dd6:	59 3f       	cpi	r21, 0xF9	; 249
     dd8:	50 f4       	brcc	.+20     	; 0xdee <__addsf3x+0x52>
     dda:	50 3e       	cpi	r21, 0xE0	; 224
     ddc:	68 f1       	brcs	.+90     	; 0xe38 <__addsf3x+0x9c>
     dde:	1a 16       	cp	r1, r26
     de0:	f0 40       	sbci	r31, 0x00	; 0
     de2:	a2 2f       	mov	r26, r18
     de4:	23 2f       	mov	r18, r19
     de6:	34 2f       	mov	r19, r20
     de8:	44 27       	eor	r20, r20
     dea:	58 5f       	subi	r21, 0xF8	; 248
     dec:	f3 cf       	rjmp	.-26     	; 0xdd4 <__addsf3x+0x38>
     dee:	46 95       	lsr	r20
     df0:	37 95       	ror	r19
     df2:	27 95       	ror	r18
     df4:	a7 95       	ror	r26
     df6:	f0 40       	sbci	r31, 0x00	; 0
     df8:	53 95       	inc	r21
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__addsf3x+0x52>
     dfc:	7e f4       	brtc	.+30     	; 0xe1c <__addsf3x+0x80>
     dfe:	1f 16       	cp	r1, r31
     e00:	ba 0b       	sbc	r27, r26
     e02:	62 0b       	sbc	r22, r18
     e04:	73 0b       	sbc	r23, r19
     e06:	84 0b       	sbc	r24, r20
     e08:	ba f0       	brmi	.+46     	; 0xe38 <__addsf3x+0x9c>
     e0a:	91 50       	subi	r25, 0x01	; 1
     e0c:	a1 f0       	breq	.+40     	; 0xe36 <__addsf3x+0x9a>
     e0e:	ff 0f       	add	r31, r31
     e10:	bb 1f       	adc	r27, r27
     e12:	66 1f       	adc	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	c2 f7       	brpl	.-16     	; 0xe0a <__addsf3x+0x6e>
     e1a:	0e c0       	rjmp	.+28     	; 0xe38 <__addsf3x+0x9c>
     e1c:	ba 0f       	add	r27, r26
     e1e:	62 1f       	adc	r22, r18
     e20:	73 1f       	adc	r23, r19
     e22:	84 1f       	adc	r24, r20
     e24:	48 f4       	brcc	.+18     	; 0xe38 <__addsf3x+0x9c>
     e26:	87 95       	ror	r24
     e28:	77 95       	ror	r23
     e2a:	67 95       	ror	r22
     e2c:	b7 95       	ror	r27
     e2e:	f7 95       	ror	r31
     e30:	9e 3f       	cpi	r25, 0xFE	; 254
     e32:	08 f0       	brcs	.+2      	; 0xe36 <__addsf3x+0x9a>
     e34:	b0 cf       	rjmp	.-160    	; 0xd96 <__addsf3+0x28>
     e36:	93 95       	inc	r25
     e38:	88 0f       	add	r24, r24
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <__addsf3x+0xa2>
     e3c:	99 27       	eor	r25, r25
     e3e:	ee 0f       	add	r30, r30
     e40:	97 95       	ror	r25
     e42:	87 95       	ror	r24
     e44:	08 95       	ret

00000e46 <ceil>:
     e46:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_trunc>
     e4a:	90 f0       	brcs	.+36     	; 0xe70 <ceil+0x2a>
     e4c:	9f 37       	cpi	r25, 0x7F	; 127
     e4e:	48 f4       	brcc	.+18     	; 0xe62 <ceil+0x1c>
     e50:	91 11       	cpse	r25, r1
     e52:	16 f4       	brtc	.+4      	; 0xe58 <ceil+0x12>
     e54:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_szero>
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	80 e8       	ldi	r24, 0x80	; 128
     e5e:	9f e3       	ldi	r25, 0x3F	; 63
     e60:	08 95       	ret
     e62:	26 f0       	brts	.+8      	; 0xe6c <ceil+0x26>
     e64:	1b 16       	cp	r1, r27
     e66:	61 1d       	adc	r22, r1
     e68:	71 1d       	adc	r23, r1
     e6a:	81 1d       	adc	r24, r1
     e6c:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_mintl>
     e70:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_mpack>

00000e74 <__cmpsf2>:
     e74:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_cmp>
     e78:	08 f4       	brcc	.+2      	; 0xe7c <__cmpsf2+0x8>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret

00000e7e <__divsf3>:
     e7e:	0e 94 53 07 	call	0xea6	; 0xea6 <__divsf3x>
     e82:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_round>
     e86:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_pscB>
     e8a:	58 f0       	brcs	.+22     	; 0xea2 <__divsf3+0x24>
     e8c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_pscA>
     e90:	40 f0       	brcs	.+16     	; 0xea2 <__divsf3+0x24>
     e92:	29 f4       	brne	.+10     	; 0xe9e <__divsf3+0x20>
     e94:	5f 3f       	cpi	r21, 0xFF	; 255
     e96:	29 f0       	breq	.+10     	; 0xea2 <__divsf3+0x24>
     e98:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
     e9c:	51 11       	cpse	r21, r1
     e9e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_szero>
     ea2:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_nan>

00000ea6 <__divsf3x>:
     ea6:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_split3>
     eaa:	68 f3       	brcs	.-38     	; 0xe86 <__divsf3+0x8>

00000eac <__divsf3_pse>:
     eac:	99 23       	and	r25, r25
     eae:	b1 f3       	breq	.-20     	; 0xe9c <__divsf3+0x1e>
     eb0:	55 23       	and	r21, r21
     eb2:	91 f3       	breq	.-28     	; 0xe98 <__divsf3+0x1a>
     eb4:	95 1b       	sub	r25, r21
     eb6:	55 0b       	sbc	r21, r21
     eb8:	bb 27       	eor	r27, r27
     eba:	aa 27       	eor	r26, r26
     ebc:	62 17       	cp	r22, r18
     ebe:	73 07       	cpc	r23, r19
     ec0:	84 07       	cpc	r24, r20
     ec2:	38 f0       	brcs	.+14     	; 0xed2 <__divsf3_pse+0x26>
     ec4:	9f 5f       	subi	r25, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	44 1f       	adc	r20, r20
     ece:	aa 1f       	adc	r26, r26
     ed0:	a9 f3       	breq	.-22     	; 0xebc <__divsf3_pse+0x10>
     ed2:	35 d0       	rcall	.+106    	; 0xf3e <__divsf3_pse+0x92>
     ed4:	0e 2e       	mov	r0, r30
     ed6:	3a f0       	brmi	.+14     	; 0xee6 <__divsf3_pse+0x3a>
     ed8:	e0 e8       	ldi	r30, 0x80	; 128
     eda:	32 d0       	rcall	.+100    	; 0xf40 <__divsf3_pse+0x94>
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	50 40       	sbci	r21, 0x00	; 0
     ee0:	e6 95       	lsr	r30
     ee2:	00 1c       	adc	r0, r0
     ee4:	ca f7       	brpl	.-14     	; 0xed8 <__divsf3_pse+0x2c>
     ee6:	2b d0       	rcall	.+86     	; 0xf3e <__divsf3_pse+0x92>
     ee8:	fe 2f       	mov	r31, r30
     eea:	29 d0       	rcall	.+82     	; 0xf3e <__divsf3_pse+0x92>
     eec:	66 0f       	add	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	bb 1f       	adc	r27, r27
     ef4:	26 17       	cp	r18, r22
     ef6:	37 07       	cpc	r19, r23
     ef8:	48 07       	cpc	r20, r24
     efa:	ab 07       	cpc	r26, r27
     efc:	b0 e8       	ldi	r27, 0x80	; 128
     efe:	09 f0       	breq	.+2      	; 0xf02 <__divsf3_pse+0x56>
     f00:	bb 0b       	sbc	r27, r27
     f02:	80 2d       	mov	r24, r0
     f04:	bf 01       	movw	r22, r30
     f06:	ff 27       	eor	r31, r31
     f08:	93 58       	subi	r25, 0x83	; 131
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	3a f0       	brmi	.+14     	; 0xf1c <__divsf3_pse+0x70>
     f0e:	9e 3f       	cpi	r25, 0xFE	; 254
     f10:	51 05       	cpc	r21, r1
     f12:	78 f0       	brcs	.+30     	; 0xf32 <__divsf3_pse+0x86>
     f14:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
     f18:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_szero>
     f1c:	5f 3f       	cpi	r21, 0xFF	; 255
     f1e:	e4 f3       	brlt	.-8      	; 0xf18 <__divsf3_pse+0x6c>
     f20:	98 3e       	cpi	r25, 0xE8	; 232
     f22:	d4 f3       	brlt	.-12     	; 0xf18 <__divsf3_pse+0x6c>
     f24:	86 95       	lsr	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f7 95       	ror	r31
     f2e:	9f 5f       	subi	r25, 0xFF	; 255
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__divsf3_pse+0x78>
     f32:	88 0f       	add	r24, r24
     f34:	91 1d       	adc	r25, r1
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	97 f9       	bld	r25, 7
     f3c:	08 95       	ret
     f3e:	e1 e0       	ldi	r30, 0x01	; 1
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	bb 1f       	adc	r27, r27
     f48:	62 17       	cp	r22, r18
     f4a:	73 07       	cpc	r23, r19
     f4c:	84 07       	cpc	r24, r20
     f4e:	ba 07       	cpc	r27, r26
     f50:	20 f0       	brcs	.+8      	; 0xf5a <__divsf3_pse+0xae>
     f52:	62 1b       	sub	r22, r18
     f54:	73 0b       	sbc	r23, r19
     f56:	84 0b       	sbc	r24, r20
     f58:	ba 0b       	sbc	r27, r26
     f5a:	ee 1f       	adc	r30, r30
     f5c:	88 f7       	brcc	.-30     	; 0xf40 <__divsf3_pse+0x94>
     f5e:	e0 95       	com	r30
     f60:	08 95       	ret

00000f62 <__fixunssfsi>:
     f62:	0e 94 9a 08 	call	0x1134	; 0x1134 <__fp_splitA>
     f66:	88 f0       	brcs	.+34     	; 0xf8a <__fixunssfsi+0x28>
     f68:	9f 57       	subi	r25, 0x7F	; 127
     f6a:	98 f0       	brcs	.+38     	; 0xf92 <__fixunssfsi+0x30>
     f6c:	b9 2f       	mov	r27, r25
     f6e:	99 27       	eor	r25, r25
     f70:	b7 51       	subi	r27, 0x17	; 23
     f72:	b0 f0       	brcs	.+44     	; 0xfa0 <__fixunssfsi+0x3e>
     f74:	e1 f0       	breq	.+56     	; 0xfae <__fixunssfsi+0x4c>
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	88 1f       	adc	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	1a f0       	brmi	.+6      	; 0xf86 <__fixunssfsi+0x24>
     f80:	ba 95       	dec	r27
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__fixunssfsi+0x14>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <__fixunssfsi+0x4c>
     f86:	b1 30       	cpi	r27, 0x01	; 1
     f88:	91 f0       	breq	.+36     	; 0xfae <__fixunssfsi+0x4c>
     f8a:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fp_zero>
     f8e:	b1 e0       	ldi	r27, 0x01	; 1
     f90:	08 95       	ret
     f92:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_zero>
     f96:	67 2f       	mov	r22, r23
     f98:	78 2f       	mov	r23, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	b8 5f       	subi	r27, 0xF8	; 248
     f9e:	39 f0       	breq	.+14     	; 0xfae <__fixunssfsi+0x4c>
     fa0:	b9 3f       	cpi	r27, 0xF9	; 249
     fa2:	cc f3       	brlt	.-14     	; 0xf96 <__fixunssfsi+0x34>
     fa4:	86 95       	lsr	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b3 95       	inc	r27
     fac:	d9 f7       	brne	.-10     	; 0xfa4 <__fixunssfsi+0x42>
     fae:	3e f4       	brtc	.+14     	; 0xfbe <__fixunssfsi+0x5c>
     fb0:	90 95       	com	r25
     fb2:	80 95       	com	r24
     fb4:	70 95       	com	r23
     fb6:	61 95       	neg	r22
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	8f 4f       	sbci	r24, 0xFF	; 255
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__floatunsisf>:
     fc0:	e8 94       	clt
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <__floatsisf+0x12>

00000fc4 <__floatsisf>:
     fc4:	97 fb       	bst	r25, 7
     fc6:	3e f4       	brtc	.+14     	; 0xfd6 <__floatsisf+0x12>
     fc8:	90 95       	com	r25
     fca:	80 95       	com	r24
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	99 23       	and	r25, r25
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <__floatsisf+0x40>
     fda:	f9 2f       	mov	r31, r25
     fdc:	96 e9       	ldi	r25, 0x96	; 150
     fde:	bb 27       	eor	r27, r27
     fe0:	93 95       	inc	r25
     fe2:	f6 95       	lsr	r31
     fe4:	87 95       	ror	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	b7 95       	ror	r27
     fec:	f1 11       	cpse	r31, r1
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <__floatsisf+0x1c>
     ff0:	fa f4       	brpl	.+62     	; 0x1030 <__floatsisf+0x6c>
     ff2:	bb 0f       	add	r27, r27
     ff4:	11 f4       	brne	.+4      	; 0xffa <__floatsisf+0x36>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <__floatsisf+0x6c>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <__floatsisf+0x6c>
    1004:	88 23       	and	r24, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <__floatsisf+0x48>
    1008:	96 e9       	ldi	r25, 0x96	; 150
    100a:	11 c0       	rjmp	.+34     	; 0x102e <__floatsisf+0x6a>
    100c:	77 23       	and	r23, r23
    100e:	21 f0       	breq	.+8      	; 0x1018 <__floatsisf+0x54>
    1010:	9e e8       	ldi	r25, 0x8E	; 142
    1012:	87 2f       	mov	r24, r23
    1014:	76 2f       	mov	r23, r22
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__floatsisf+0x5e>
    1018:	66 23       	and	r22, r22
    101a:	71 f0       	breq	.+28     	; 0x1038 <__floatsisf+0x74>
    101c:	96 e8       	ldi	r25, 0x86	; 134
    101e:	86 2f       	mov	r24, r22
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	2a f0       	brmi	.+10     	; 0x1030 <__floatsisf+0x6c>
    1026:	9a 95       	dec	r25
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	da f7       	brpl	.-10     	; 0x1026 <__floatsisf+0x62>
    1030:	88 0f       	add	r24, r24
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	97 f9       	bld	r25, 7
    1038:	08 95       	ret

0000103a <__fp_cmp>:
    103a:	99 0f       	add	r25, r25
    103c:	00 08       	sbc	r0, r0
    103e:	55 0f       	add	r21, r21
    1040:	aa 0b       	sbc	r26, r26
    1042:	e0 e8       	ldi	r30, 0x80	; 128
    1044:	fe ef       	ldi	r31, 0xFE	; 254
    1046:	16 16       	cp	r1, r22
    1048:	17 06       	cpc	r1, r23
    104a:	e8 07       	cpc	r30, r24
    104c:	f9 07       	cpc	r31, r25
    104e:	c0 f0       	brcs	.+48     	; 0x1080 <__fp_cmp+0x46>
    1050:	12 16       	cp	r1, r18
    1052:	13 06       	cpc	r1, r19
    1054:	e4 07       	cpc	r30, r20
    1056:	f5 07       	cpc	r31, r21
    1058:	98 f0       	brcs	.+38     	; 0x1080 <__fp_cmp+0x46>
    105a:	62 1b       	sub	r22, r18
    105c:	73 0b       	sbc	r23, r19
    105e:	84 0b       	sbc	r24, r20
    1060:	95 0b       	sbc	r25, r21
    1062:	39 f4       	brne	.+14     	; 0x1072 <__fp_cmp+0x38>
    1064:	0a 26       	eor	r0, r26
    1066:	61 f0       	breq	.+24     	; 0x1080 <__fp_cmp+0x46>
    1068:	23 2b       	or	r18, r19
    106a:	24 2b       	or	r18, r20
    106c:	25 2b       	or	r18, r21
    106e:	21 f4       	brne	.+8      	; 0x1078 <__fp_cmp+0x3e>
    1070:	08 95       	ret
    1072:	0a 26       	eor	r0, r26
    1074:	09 f4       	brne	.+2      	; 0x1078 <__fp_cmp+0x3e>
    1076:	a1 40       	sbci	r26, 0x01	; 1
    1078:	a6 95       	lsr	r26
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	81 1d       	adc	r24, r1
    107e:	81 1d       	adc	r24, r1
    1080:	08 95       	ret

00001082 <__fp_inf>:
    1082:	97 f9       	bld	r25, 7
    1084:	9f 67       	ori	r25, 0x7F	; 127
    1086:	80 e8       	ldi	r24, 0x80	; 128
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	08 95       	ret

0000108e <__fp_mintl>:
    108e:	88 23       	and	r24, r24
    1090:	71 f4       	brne	.+28     	; 0x10ae <__fp_mintl+0x20>
    1092:	77 23       	and	r23, r23
    1094:	21 f0       	breq	.+8      	; 0x109e <__fp_mintl+0x10>
    1096:	98 50       	subi	r25, 0x08	; 8
    1098:	87 2b       	or	r24, r23
    109a:	76 2f       	mov	r23, r22
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <__fp_mintl+0x1e>
    109e:	66 23       	and	r22, r22
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__fp_mintl+0x18>
    10a2:	99 27       	eor	r25, r25
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <__fp_mintl+0x32>
    10a6:	90 51       	subi	r25, 0x10	; 16
    10a8:	86 2b       	or	r24, r22
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	2a f0       	brmi	.+10     	; 0x10ba <__fp_mintl+0x2c>
    10b0:	9a 95       	dec	r25
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	da f7       	brpl	.-10     	; 0x10b0 <__fp_mintl+0x22>
    10ba:	88 0f       	add	r24, r24
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret

000010c4 <__fp_mpack>:
    10c4:	9f 3f       	cpi	r25, 0xFF	; 255
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <__fp_mpack_finite+0xc>

000010c8 <__fp_mpack_finite>:
    10c8:	91 50       	subi	r25, 0x01	; 1
    10ca:	20 f4       	brcc	.+8      	; 0x10d4 <__fp_mpack_finite+0xc>
    10cc:	87 95       	ror	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	88 0f       	add	r24, r24
    10d6:	91 1d       	adc	r25, r1
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	97 f9       	bld	r25, 7
    10de:	08 95       	ret

000010e0 <__fp_nan>:
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	80 ec       	ldi	r24, 0xC0	; 192
    10e4:	08 95       	ret

000010e6 <__fp_pscA>:
    10e6:	00 24       	eor	r0, r0
    10e8:	0a 94       	dec	r0
    10ea:	16 16       	cp	r1, r22
    10ec:	17 06       	cpc	r1, r23
    10ee:	18 06       	cpc	r1, r24
    10f0:	09 06       	cpc	r0, r25
    10f2:	08 95       	ret

000010f4 <__fp_pscB>:
    10f4:	00 24       	eor	r0, r0
    10f6:	0a 94       	dec	r0
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	14 06       	cpc	r1, r20
    10fe:	05 06       	cpc	r0, r21
    1100:	08 95       	ret

00001102 <__fp_round>:
    1102:	09 2e       	mov	r0, r25
    1104:	03 94       	inc	r0
    1106:	00 0c       	add	r0, r0
    1108:	11 f4       	brne	.+4      	; 0x110e <__fp_round+0xc>
    110a:	88 23       	and	r24, r24
    110c:	52 f0       	brmi	.+20     	; 0x1122 <__fp_round+0x20>
    110e:	bb 0f       	add	r27, r27
    1110:	40 f4       	brcc	.+16     	; 0x1122 <__fp_round+0x20>
    1112:	bf 2b       	or	r27, r31
    1114:	11 f4       	brne	.+4      	; 0x111a <__fp_round+0x18>
    1116:	60 ff       	sbrs	r22, 0
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__fp_round+0x20>
    111a:	6f 5f       	subi	r22, 0xFF	; 255
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	08 95       	ret

00001124 <__fp_split3>:
    1124:	57 fd       	sbrc	r21, 7
    1126:	90 58       	subi	r25, 0x80	; 128
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	59 f0       	breq	.+22     	; 0x1144 <__fp_splitA+0x10>
    112e:	5f 3f       	cpi	r21, 0xFF	; 255
    1130:	71 f0       	breq	.+28     	; 0x114e <__fp_splitA+0x1a>
    1132:	47 95       	ror	r20

00001134 <__fp_splitA>:
    1134:	88 0f       	add	r24, r24
    1136:	97 fb       	bst	r25, 7
    1138:	99 1f       	adc	r25, r25
    113a:	61 f0       	breq	.+24     	; 0x1154 <__fp_splitA+0x20>
    113c:	9f 3f       	cpi	r25, 0xFF	; 255
    113e:	79 f0       	breq	.+30     	; 0x115e <__fp_splitA+0x2a>
    1140:	87 95       	ror	r24
    1142:	08 95       	ret
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	14 06       	cpc	r1, r20
    114a:	55 1f       	adc	r21, r21
    114c:	f2 cf       	rjmp	.-28     	; 0x1132 <__fp_split3+0xe>
    114e:	46 95       	lsr	r20
    1150:	f1 df       	rcall	.-30     	; 0x1134 <__fp_splitA>
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <__fp_splitA+0x30>
    1154:	16 16       	cp	r1, r22
    1156:	17 06       	cpc	r1, r23
    1158:	18 06       	cpc	r1, r24
    115a:	99 1f       	adc	r25, r25
    115c:	f1 cf       	rjmp	.-30     	; 0x1140 <__fp_splitA+0xc>
    115e:	86 95       	lsr	r24
    1160:	71 05       	cpc	r23, r1
    1162:	61 05       	cpc	r22, r1
    1164:	08 94       	sec
    1166:	08 95       	ret

00001168 <__fp_trunc>:
    1168:	0e 94 9a 08 	call	0x1134	; 0x1134 <__fp_splitA>
    116c:	a0 f0       	brcs	.+40     	; 0x1196 <__fp_trunc+0x2e>
    116e:	be e7       	ldi	r27, 0x7E	; 126
    1170:	b9 17       	cp	r27, r25
    1172:	88 f4       	brcc	.+34     	; 0x1196 <__fp_trunc+0x2e>
    1174:	bb 27       	eor	r27, r27
    1176:	9f 38       	cpi	r25, 0x8F	; 143
    1178:	60 f4       	brcc	.+24     	; 0x1192 <__fp_trunc+0x2a>
    117a:	16 16       	cp	r1, r22
    117c:	b1 1d       	adc	r27, r1
    117e:	67 2f       	mov	r22, r23
    1180:	78 2f       	mov	r23, r24
    1182:	88 27       	eor	r24, r24
    1184:	98 5f       	subi	r25, 0xF8	; 248
    1186:	f7 cf       	rjmp	.-18     	; 0x1176 <__fp_trunc+0xe>
    1188:	86 95       	lsr	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b1 1d       	adc	r27, r1
    1190:	93 95       	inc	r25
    1192:	96 39       	cpi	r25, 0x96	; 150
    1194:	c8 f3       	brcs	.-14     	; 0x1188 <__fp_trunc+0x20>
    1196:	08 95       	ret

00001198 <__fp_zero>:
    1198:	e8 94       	clt

0000119a <__fp_szero>:
    119a:	bb 27       	eor	r27, r27
    119c:	66 27       	eor	r22, r22
    119e:	77 27       	eor	r23, r23
    11a0:	cb 01       	movw	r24, r22
    11a2:	97 f9       	bld	r25, 7
    11a4:	08 95       	ret

000011a6 <__gesf2>:
    11a6:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_cmp>
    11aa:	08 f4       	brcc	.+2      	; 0x11ae <__gesf2+0x8>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__mulsf3>:
    11b0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__mulsf3x>
    11b4:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_round>
    11b8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__fp_pscA>
    11bc:	38 f0       	brcs	.+14     	; 0x11cc <__mulsf3+0x1c>
    11be:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_pscB>
    11c2:	20 f0       	brcs	.+8      	; 0x11cc <__mulsf3+0x1c>
    11c4:	95 23       	and	r25, r21
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__mulsf3+0x1c>
    11c8:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
    11cc:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_nan>
    11d0:	11 24       	eor	r1, r1
    11d2:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_szero>

000011d6 <__mulsf3x>:
    11d6:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_split3>
    11da:	70 f3       	brcs	.-36     	; 0x11b8 <__mulsf3+0x8>

000011dc <__mulsf3_pse>:
    11dc:	95 9f       	mul	r25, r21
    11de:	c1 f3       	breq	.-16     	; 0x11d0 <__mulsf3+0x20>
    11e0:	95 0f       	add	r25, r21
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	55 1f       	adc	r21, r21
    11e6:	62 9f       	mul	r22, r18
    11e8:	f0 01       	movw	r30, r0
    11ea:	72 9f       	mul	r23, r18
    11ec:	bb 27       	eor	r27, r27
    11ee:	f0 0d       	add	r31, r0
    11f0:	b1 1d       	adc	r27, r1
    11f2:	63 9f       	mul	r22, r19
    11f4:	aa 27       	eor	r26, r26
    11f6:	f0 0d       	add	r31, r0
    11f8:	b1 1d       	adc	r27, r1
    11fa:	aa 1f       	adc	r26, r26
    11fc:	64 9f       	mul	r22, r20
    11fe:	66 27       	eor	r22, r22
    1200:	b0 0d       	add	r27, r0
    1202:	a1 1d       	adc	r26, r1
    1204:	66 1f       	adc	r22, r22
    1206:	82 9f       	mul	r24, r18
    1208:	22 27       	eor	r18, r18
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	62 1f       	adc	r22, r18
    1210:	73 9f       	mul	r23, r19
    1212:	b0 0d       	add	r27, r0
    1214:	a1 1d       	adc	r26, r1
    1216:	62 1f       	adc	r22, r18
    1218:	83 9f       	mul	r24, r19
    121a:	a0 0d       	add	r26, r0
    121c:	61 1d       	adc	r22, r1
    121e:	22 1f       	adc	r18, r18
    1220:	74 9f       	mul	r23, r20
    1222:	33 27       	eor	r19, r19
    1224:	a0 0d       	add	r26, r0
    1226:	61 1d       	adc	r22, r1
    1228:	23 1f       	adc	r18, r19
    122a:	84 9f       	mul	r24, r20
    122c:	60 0d       	add	r22, r0
    122e:	21 1d       	adc	r18, r1
    1230:	82 2f       	mov	r24, r18
    1232:	76 2f       	mov	r23, r22
    1234:	6a 2f       	mov	r22, r26
    1236:	11 24       	eor	r1, r1
    1238:	9f 57       	subi	r25, 0x7F	; 127
    123a:	50 40       	sbci	r21, 0x00	; 0
    123c:	9a f0       	brmi	.+38     	; 0x1264 <__mulsf3_pse+0x88>
    123e:	f1 f0       	breq	.+60     	; 0x127c <__mulsf3_pse+0xa0>
    1240:	88 23       	and	r24, r24
    1242:	4a f0       	brmi	.+18     	; 0x1256 <__mulsf3_pse+0x7a>
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	bb 1f       	adc	r27, r27
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	50 40       	sbci	r21, 0x00	; 0
    1254:	a9 f7       	brne	.-22     	; 0x1240 <__mulsf3_pse+0x64>
    1256:	9e 3f       	cpi	r25, 0xFE	; 254
    1258:	51 05       	cpc	r21, r1
    125a:	80 f0       	brcs	.+32     	; 0x127c <__mulsf3_pse+0xa0>
    125c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_inf>
    1260:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_szero>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	e4 f3       	brlt	.-8      	; 0x1260 <__mulsf3_pse+0x84>
    1268:	98 3e       	cpi	r25, 0xE8	; 232
    126a:	d4 f3       	brlt	.-12     	; 0x1260 <__mulsf3_pse+0x84>
    126c:	86 95       	lsr	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b7 95       	ror	r27
    1274:	f7 95       	ror	r31
    1276:	e7 95       	ror	r30
    1278:	9f 5f       	subi	r25, 0xFF	; 255
    127a:	c1 f7       	brne	.-16     	; 0x126c <__mulsf3_pse+0x90>
    127c:	fe 2b       	or	r31, r30
    127e:	88 0f       	add	r24, r24
    1280:	91 1d       	adc	r25, r1
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	97 f9       	bld	r25, 7
    1288:	08 95       	ret

0000128a <__umoddi3>:
    128a:	68 94       	set
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <__udivdi3_umoddi3>

0000128e <__udivdi3>:
    128e:	e8 94       	clt

00001290 <__udivdi3_umoddi3>:
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__udivmod64>
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	08 95       	ret

000012a6 <__udivmod64>:
    12a6:	88 24       	eor	r8, r8
    12a8:	99 24       	eor	r9, r9
    12aa:	f4 01       	movw	r30, r8
    12ac:	e4 01       	movw	r28, r8
    12ae:	b0 e4       	ldi	r27, 0x40	; 64
    12b0:	9f 93       	push	r25
    12b2:	aa 27       	eor	r26, r26
    12b4:	9a 15       	cp	r25, r10
    12b6:	8b 04       	cpc	r8, r11
    12b8:	9c 04       	cpc	r9, r12
    12ba:	ed 05       	cpc	r30, r13
    12bc:	fe 05       	cpc	r31, r14
    12be:	cf 05       	cpc	r28, r15
    12c0:	d0 07       	cpc	r29, r16
    12c2:	a1 07       	cpc	r26, r17
    12c4:	98 f4       	brcc	.+38     	; 0x12ec <__udivmod64+0x46>
    12c6:	ad 2f       	mov	r26, r29
    12c8:	dc 2f       	mov	r29, r28
    12ca:	cf 2f       	mov	r28, r31
    12cc:	fe 2f       	mov	r31, r30
    12ce:	e9 2d       	mov	r30, r9
    12d0:	98 2c       	mov	r9, r8
    12d2:	89 2e       	mov	r8, r25
    12d4:	98 2f       	mov	r25, r24
    12d6:	87 2f       	mov	r24, r23
    12d8:	76 2f       	mov	r23, r22
    12da:	65 2f       	mov	r22, r21
    12dc:	54 2f       	mov	r21, r20
    12de:	43 2f       	mov	r20, r19
    12e0:	32 2f       	mov	r19, r18
    12e2:	22 27       	eor	r18, r18
    12e4:	b8 50       	subi	r27, 0x08	; 8
    12e6:	31 f7       	brne	.-52     	; 0x12b4 <__udivmod64+0xe>
    12e8:	bf 91       	pop	r27
    12ea:	27 c0       	rjmp	.+78     	; 0x133a <__udivmod64+0x94>
    12ec:	1b 2e       	mov	r1, r27
    12ee:	bf 91       	pop	r27
    12f0:	bb 27       	eor	r27, r27
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	44 1f       	adc	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	66 1f       	adc	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	88 1c       	adc	r8, r8
    1304:	99 1c       	adc	r9, r9
    1306:	ee 1f       	adc	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	cc 1f       	adc	r28, r28
    130c:	dd 1f       	adc	r29, r29
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	8a 14       	cp	r8, r10
    1314:	9b 04       	cpc	r9, r11
    1316:	ec 05       	cpc	r30, r12
    1318:	fd 05       	cpc	r31, r13
    131a:	ce 05       	cpc	r28, r14
    131c:	df 05       	cpc	r29, r15
    131e:	a0 07       	cpc	r26, r16
    1320:	b1 07       	cpc	r27, r17
    1322:	48 f0       	brcs	.+18     	; 0x1336 <__udivmod64+0x90>
    1324:	8a 18       	sub	r8, r10
    1326:	9b 08       	sbc	r9, r11
    1328:	ec 09       	sbc	r30, r12
    132a:	fd 09       	sbc	r31, r13
    132c:	ce 09       	sbc	r28, r14
    132e:	df 09       	sbc	r29, r15
    1330:	a0 0b       	sbc	r26, r16
    1332:	b1 0b       	sbc	r27, r17
    1334:	21 60       	ori	r18, 0x01	; 1
    1336:	1a 94       	dec	r1
    1338:	e1 f6       	brne	.-72     	; 0x12f2 <__udivmod64+0x4c>
    133a:	2e f4       	brtc	.+10     	; 0x1346 <__udivmod64+0xa0>
    133c:	94 01       	movw	r18, r8
    133e:	af 01       	movw	r20, r30
    1340:	be 01       	movw	r22, r28
    1342:	cd 01       	movw	r24, r26
    1344:	00 0c       	add	r0, r0
    1346:	08 95       	ret

00001348 <__adddi3_s8>:
    1348:	00 24       	eor	r0, r0
    134a:	a7 fd       	sbrc	r26, 7
    134c:	00 94       	com	r0
    134e:	2a 0f       	add	r18, r26
    1350:	30 1d       	adc	r19, r0
    1352:	40 1d       	adc	r20, r0
    1354:	50 1d       	adc	r21, r0
    1356:	60 1d       	adc	r22, r0
    1358:	70 1d       	adc	r23, r0
    135a:	80 1d       	adc	r24, r0
    135c:	90 1d       	adc	r25, r0
    135e:	08 95       	ret

00001360 <__cmpdi2_s8>:
    1360:	00 24       	eor	r0, r0
    1362:	a7 fd       	sbrc	r26, 7
    1364:	00 94       	com	r0
    1366:	2a 17       	cp	r18, r26
    1368:	30 05       	cpc	r19, r0
    136a:	40 05       	cpc	r20, r0
    136c:	50 05       	cpc	r21, r0
    136e:	60 05       	cpc	r22, r0
    1370:	70 05       	cpc	r23, r0
    1372:	80 05       	cpc	r24, r0
    1374:	90 05       	cpc	r25, r0
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
